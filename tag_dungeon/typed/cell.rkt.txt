(module cell typed/racket/base
  (#%module-begin
   (module configure-runtime '#%kernel
     (#%module-begin (#%require racket/runtime-config) (#%app configure '#f)))
   (#%require (submod typed-racket/private/type-contract predicates))
   (#%require typed-racket/utils/utils)
   (#%require (for-meta 1 typed-racket/utils/utils))
   (#%require typed-racket/utils/any-wrap)
   (#%require typed-racket/utils/struct-type-c)
   (#%require typed-racket/utils/prefab-c)
   (#%require typed-racket/utils/opaque-object)
   (#%require typed-racket/utils/evt-contract)
   (#%require typed-racket/utils/hash-contract)
   (#%require typed-racket/utils/vector-contract)
   (#%require typed-racket/utils/sealing-contract)
   (#%require typed-racket/utils/promise-not-name-contract)
   (#%require typed-racket/utils/simple-result-arrow)
   (#%require racket/sequence)
   (#%require racket/contract/parametric)
   (begin-for-syntax
    (module*
     #%type-decl
     #f
     (#%plain-module-begin
      (#%declare #:empty-namespace)
      (#%require typed-racket/types/numeric-tower)
      (#%require typed-racket/env/type-name-env)
      (#%require typed-racket/env/global-env)
      (#%require typed-racket/env/type-alias-env)
      (#%require typed-racket/types/struct-table)
      (#%require typed-racket/types/abbrev)
      (#%require
       (just-meta 0 (rename racket/private/sort raw-sort sort))
       (just-meta 0 (rename racket/private/sort vector-sort! vector-sort!))
       (just-meta 0 (rename racket/private/sort vector-sort vector-sort))
       (only racket/private/sort))
      (define-values (g3161) (#%app make-Name (quote-syntax Cell%) '0 '#f))
      (#%app register-type (t-quote-syntax cell%) g3161)
      (#%app
       register-type
       (t-quote-syntax char->cell%)
       (#%app simple-> (#%app list -Char) g3161))
      (#%app
       register-type
       (t-quote-syntax chars->cell%s)
       (#%app
        Un
        (#%app make-Weak-HashTable -Char g3161)
        (#%app make-Immutable-HashTable -Char g3161)
        (#%app make-Mutable-HashTable -Char g3161)))
      (#%app
       register-type
       (t-quote-syntax dict-ref)
       (#%app
        simple->
        (#%app
         list
         (#%app
          Un
          (#%app make-Weak-HashTable -Char g3161)
          (#%app make-Immutable-HashTable -Char g3161)
          (#%app make-Mutable-HashTable -Char g3161))
         -Char)
        g3161))
      (#%app
       register-type
       (t-quote-syntax dict-set!)
       (#%app
        simple->
        (#%app
         list
         (#%app
          Un
          (#%app make-Weak-HashTable -Char g3161)
          (#%app make-Immutable-HashTable -Char g3161)
          (#%app make-Mutable-HashTable -Char g3161))
         -Char
         g3161)
        -Void))
      (#%app register-type (t-quote-syntax door%) g3161)
      (#%app register-type (t-quote-syntax double-bar?) -True)
      (#%app register-type (t-quote-syntax east-tee-wall%) g3161)
      (#%app register-type (t-quote-syntax empty-cell%) g3161)
      (#%app register-type (t-quote-syntax four-corner-wall%) g3161)
      (#%app register-type (t-quote-syntax horizontal-door%) g3161)
      (#%app register-type (t-quote-syntax horizontal-wall%) g3161)
      (#%app register-type (t-quote-syntax north-east-wall%) g3161)
      (#%app register-type (t-quote-syntax north-tee-wall%) g3161)
      (#%app register-type (t-quote-syntax north-west-wall%) g3161)
      (#%app register-type (t-quote-syntax pillar%) g3161)
      (#%app
       register-type
       (t-quote-syntax register-cell-type!)
       (#%app simple-> (#%app list g3161 -Char) -Void))
      (#%app register-type (t-quote-syntax south-east-wall%) g3161)
      (#%app register-type (t-quote-syntax south-tee-wall%) g3161)
      (#%app register-type (t-quote-syntax south-west-wall%) g3161)
      (#%app register-type (t-quote-syntax vertical-door%) g3161)
      (#%app register-type (t-quote-syntax vertical-wall%) g3161)
      (#%app register-type (t-quote-syntax void-cell%) g3161)
      (#%app register-type (t-quote-syntax wall%) g3161)
      (#%app register-type (t-quote-syntax west-tee-wall%) g3161)
      (#%app
       register-type
       (t-quote-syntax char->cell%)
       (#%app simple-> (#%app list -Char) g3161))
      (#%app register-type (t-quote-syntax door%) g3161)
      (#%app register-type (t-quote-syntax east-tee-wall%) g3161)
      (#%app register-type (t-quote-syntax empty-cell%) g3161)
      (#%app register-type (t-quote-syntax four-corner-wall%) g3161)
      (#%app register-type (t-quote-syntax horizontal-door%) g3161)
      (#%app register-type (t-quote-syntax horizontal-wall%) g3161)
      (#%app register-type (t-quote-syntax north-east-wall%) g3161)
      (#%app register-type (t-quote-syntax north-tee-wall%) g3161)
      (#%app register-type (t-quote-syntax north-west-wall%) g3161)
      (#%app register-type (t-quote-syntax pillar%) g3161)
      (#%app register-type (t-quote-syntax south-east-wall%) g3161)
      (#%app register-type (t-quote-syntax south-tee-wall%) g3161)
      (#%app register-type (t-quote-syntax south-west-wall%) g3161)
      (#%app register-type (t-quote-syntax vertical-door%) g3161)
      (#%app register-type (t-quote-syntax vertical-wall%) g3161)
      (#%app register-type (t-quote-syntax void-cell%) g3161)
      (#%app register-type (t-quote-syntax wall%) g3161)
      (#%app register-type (t-quote-syntax west-tee-wall%) g3161))))
   (begin-for-syntax
    (#%app
     add-mod!
     (#%app variable-reference->module-path-index (#%variable-reference))))
   (define-values
    (blame412)
    (#%app
     module-name-fixup
     (#%app variable-reference->module-source/submod (#%variable-reference))
     (#%app list)))
   (begin-for-syntax
    (#%require typed-racket/utils/redirect-contract)
    (module #%contract-defs-reference racket/base
      (#%module-begin
       (module configure-runtime '#%kernel
         (#%module-begin
          (#%require racket/runtime-config)
          (#%app configure '#f)))
       (#%require racket/runtime-path)
       (#%require (for-meta 1 racket/base))
       (define-values
        (contract-defs-submod)
        (let-values (((contract-defs-submod)
                      (let-values (((runtime?) '#t))
                        (#%app
                         list
                         'module
                         '(submod ".." #%contract-defs)
                         (#%variable-reference)))))
          (let-values (((get-dir) void))
            (#%app
             apply
             values
             (#%app
              resolve-paths
              (#%variable-reference)
              get-dir
              (#%app list contract-defs-submod))))))
       (begin-for-syntax
        (#%app
         register-ext-files
         (#%variable-reference)
         (let-values (((contract-defs-submod)
                       (let-values (((runtime?) '#f))
                         (#%app
                          list
                          'module
                          '(submod ".." #%contract-defs)
                          (#%variable-reference)))))
           (#%app list contract-defs-submod))))
       (#%provide contract-defs-submod)))
    (#%require (submod "." #%contract-defs-reference))
    (define-values
     (make-redirect413)
     (#%app make-make-redirect-to-contract contract-defs-submod)))
   (module*
    #%contract-defs
    #f
    (#%plain-module-begin
     (#%declare #:empty-namespace)
     (#%require (submod typed-racket/private/type-contract predicates))
     (#%require typed-racket/utils/utils)
     (#%require (for-meta 1 typed-racket/utils/utils))
     (#%require typed-racket/utils/any-wrap)
     (#%require typed-racket/utils/struct-type-c)
     (#%require typed-racket/utils/prefab-c)
     (#%require typed-racket/utils/opaque-object)
     (#%require typed-racket/utils/evt-contract)
     (#%require typed-racket/utils/hash-contract)
     (#%require typed-racket/utils/vector-contract)
     (#%require typed-racket/utils/sealing-contract)
     (#%require typed-racket/utils/promise-not-name-contract)
     (#%require typed-racket/utils/simple-result-arrow)
     (#%require racket/sequence)
     (#%require racket/contract/parametric)
     (define-values (generated-contract414) any/c/proc)
     (define-values
      (idZ3)
      (let-values (((char->cell%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract414)))
        char->cell%))
     (define-syntaxes
      (char->cell%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax char->cell%)
       (quote-syntax idZ3)
       (quote-syntax char->cell%)
       '#f
       '#f
       (quote-syntax idX1)
       (quote-syntax idB4)))
     (#%provide char->cell%)
     (define-values (generated-contract415) any/c/proc)
     (define-values
      (idZ7)
      (let-values (((door%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract415)))
        door%))
     (define-syntaxes
      (door%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax door%)
       (quote-syntax idZ7)
       (quote-syntax door%)
       '#f
       '#f
       (quote-syntax idX5)
       (quote-syntax idB8)))
     (#%provide door%)
     (define-values (generated-contract416) any/c/proc)
     (define-values
      (idZ11)
      (let-values (((east-tee-wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract416)))
        east-tee-wall%))
     (define-syntaxes
      (east-tee-wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax east-tee-wall%)
       (quote-syntax idZ11)
       (quote-syntax east-tee-wall%)
       '#f
       '#f
       (quote-syntax idX9)
       (quote-syntax idB12)))
     (#%provide east-tee-wall%)
     (define-values (generated-contract417) any/c/proc)
     (define-values
      (idZ15)
      (let-values (((empty-cell%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract417)))
        empty-cell%))
     (define-syntaxes
      (empty-cell%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax empty-cell%)
       (quote-syntax idZ15)
       (quote-syntax empty-cell%)
       '#f
       '#f
       (quote-syntax idX13)
       (quote-syntax idB16)))
     (#%provide empty-cell%)
     (define-values (generated-contract418) any/c/proc)
     (define-values
      (idZ19)
      (let-values (((four-corner-wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract418)))
        four-corner-wall%))
     (define-syntaxes
      (four-corner-wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax four-corner-wall%)
       (quote-syntax idZ19)
       (quote-syntax four-corner-wall%)
       '#f
       '#f
       (quote-syntax idX17)
       (quote-syntax idB20)))
     (#%provide four-corner-wall%)
     (define-values (generated-contract419) any/c/proc)
     (define-values
      (idZ23)
      (let-values (((horizontal-door%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract419)))
        horizontal-door%))
     (define-syntaxes
      (horizontal-door%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax horizontal-door%)
       (quote-syntax idZ23)
       (quote-syntax horizontal-door%)
       '#f
       '#f
       (quote-syntax idX21)
       (quote-syntax idB24)))
     (#%provide horizontal-door%)
     (define-values (generated-contract420) any/c/proc)
     (define-values
      (idZ27)
      (let-values (((horizontal-wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract420)))
        horizontal-wall%))
     (define-syntaxes
      (horizontal-wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax horizontal-wall%)
       (quote-syntax idZ27)
       (quote-syntax horizontal-wall%)
       '#f
       '#f
       (quote-syntax idX25)
       (quote-syntax idB28)))
     (#%provide horizontal-wall%)
     (define-values (generated-contract421) any/c/proc)
     (define-values
      (idZ31)
      (let-values (((north-east-wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract421)))
        north-east-wall%))
     (define-syntaxes
      (north-east-wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax north-east-wall%)
       (quote-syntax idZ31)
       (quote-syntax north-east-wall%)
       '#f
       '#f
       (quote-syntax idX29)
       (quote-syntax idB32)))
     (#%provide north-east-wall%)
     (define-values (generated-contract422) any/c/proc)
     (define-values
      (idZ35)
      (let-values (((north-tee-wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract422)))
        north-tee-wall%))
     (define-syntaxes
      (north-tee-wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax north-tee-wall%)
       (quote-syntax idZ35)
       (quote-syntax north-tee-wall%)
       '#f
       '#f
       (quote-syntax idX33)
       (quote-syntax idB36)))
     (#%provide north-tee-wall%)
     (define-values (generated-contract423) any/c/proc)
     (define-values
      (idZ39)
      (let-values (((north-west-wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract423)))
        north-west-wall%))
     (define-syntaxes
      (north-west-wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax north-west-wall%)
       (quote-syntax idZ39)
       (quote-syntax north-west-wall%)
       '#f
       '#f
       (quote-syntax idX37)
       (quote-syntax idB40)))
     (#%provide north-west-wall%)
     (define-values (generated-contract424) any/c/proc)
     (define-values
      (idZ43)
      (let-values (((pillar%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract424)))
        pillar%))
     (define-syntaxes
      (pillar%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax pillar%)
       (quote-syntax idZ43)
       (quote-syntax pillar%)
       '#f
       '#f
       (quote-syntax idX41)
       (quote-syntax idB44)))
     (#%provide pillar%)
     (define-values (generated-contract425) any/c/proc)
     (define-values
      (idZ47)
      (let-values (((south-east-wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract425)))
        south-east-wall%))
     (define-syntaxes
      (south-east-wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax south-east-wall%)
       (quote-syntax idZ47)
       (quote-syntax south-east-wall%)
       '#f
       '#f
       (quote-syntax idX45)
       (quote-syntax idB48)))
     (#%provide south-east-wall%)
     (define-values (generated-contract426) any/c/proc)
     (define-values
      (idZ51)
      (let-values (((south-tee-wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract426)))
        south-tee-wall%))
     (define-syntaxes
      (south-tee-wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax south-tee-wall%)
       (quote-syntax idZ51)
       (quote-syntax south-tee-wall%)
       '#f
       '#f
       (quote-syntax idX49)
       (quote-syntax idB52)))
     (#%provide south-tee-wall%)
     (define-values (generated-contract427) any/c/proc)
     (define-values
      (idZ55)
      (let-values (((south-west-wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract427)))
        south-west-wall%))
     (define-syntaxes
      (south-west-wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax south-west-wall%)
       (quote-syntax idZ55)
       (quote-syntax south-west-wall%)
       '#f
       '#f
       (quote-syntax idX53)
       (quote-syntax idB56)))
     (#%provide south-west-wall%)
     (define-values (generated-contract428) any/c/proc)
     (define-values
      (idZ59)
      (let-values (((vertical-door%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract428)))
        vertical-door%))
     (define-syntaxes
      (vertical-door%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax vertical-door%)
       (quote-syntax idZ59)
       (quote-syntax vertical-door%)
       '#f
       '#f
       (quote-syntax idX57)
       (quote-syntax idB60)))
     (#%provide vertical-door%)
     (define-values (generated-contract429) any/c/proc)
     (define-values
      (idZ63)
      (let-values (((vertical-wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract429)))
        vertical-wall%))
     (define-syntaxes
      (vertical-wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax vertical-wall%)
       (quote-syntax idZ63)
       (quote-syntax vertical-wall%)
       '#f
       '#f
       (quote-syntax idX61)
       (quote-syntax idB64)))
     (#%provide vertical-wall%)
     (define-values (generated-contract430) any/c/proc)
     (define-values
      (idZ67)
      (let-values (((void-cell%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract430)))
        void-cell%))
     (define-syntaxes
      (void-cell%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax void-cell%)
       (quote-syntax idZ67)
       (quote-syntax void-cell%)
       '#f
       '#f
       (quote-syntax idX65)
       (quote-syntax idB68)))
     (#%provide void-cell%)
     (define-values (generated-contract431) any/c/proc)
     (define-values
      (idZ71)
      (let-values (((wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract431)))
        wall%))
     (define-syntaxes
      (wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax wall%)
       (quote-syntax idZ71)
       (quote-syntax wall%)
       '#f
       '#f
       (quote-syntax idX69)
       (quote-syntax idB72)))
     (#%provide wall%)
     (define-values (generated-contract432) any/c/proc)
     (define-values
      (idZ75)
      (let-values (((west-tee-wall%)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract432)))
        west-tee-wall%))
     (define-syntaxes
      (west-tee-wall%)
      (#%app
       make-provide/contract-transformer
       (quote-syntax west-tee-wall%)
       (quote-syntax idZ75)
       (quote-syntax west-tee-wall%)
       '#f
       '#f
       (quote-syntax idX73)
       (quote-syntax idB76)))
     (#%provide west-tee-wall%)
     (define-values
      (idX1 idB4)
      (#%app
       do-partial-app
       idZ3
       char->cell%
       'char->cell%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '9
        '2
        '120
        '11)
       '#f))
     (define-values
      (idX5 idB8)
      (#%app
       do-partial-app
       idZ7
       door%
       'door%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '6
        '2
        '76
        '5)
       '#f))
     (define-values
      (idX9 idB12)
      (#%app
       do-partial-app
       idZ11
       east-tee-wall%
       'east-tee-wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '113
        '13
        '3119
        '14)
       '#f))
     (define-values
      (idX13 idB16)
      (#%app
       do-partial-app
       idZ15
       empty-cell%
       'empty-cell%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '4
        '2
        '49
        '11)
       '#f))
     (define-values
      (idX17 idB20)
      (#%app
       do-partial-app
       idZ19
       four-corner-wall%
       'four-corner-wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '106
        '13
        '2783
        '17)
       '#f))
     (define-values
      (idX21 idB24)
      (#%app
       do-partial-app
       idZ23
       horizontal-door%
       'horizontal-door%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '8
        '2
        '101
        '16)
       '#f))
     (define-values
      (idX25 idB28)
      (#%app
       do-partial-app
       idZ27
       horizontal-wall%
       'horizontal-wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '105
        '13
        '2735
        '16)
       '#f))
     (define-values
      (idX29 idB32)
      (#%app
       do-partial-app
       idZ31
       north-east-wall%
       'north-east-wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '107
        '13
        '2831
        '16)
       '#f))
     (define-values
      (idX33 idB36)
      (#%app
       do-partial-app
       idZ35
       north-tee-wall%
       'north-tee-wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '111
        '13
        '3023
        '15)
       '#f))
     (define-values
      (idX37 idB40)
      (#%app
       do-partial-app
       idZ39
       north-west-wall%
       'north-west-wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '108
        '13
        '2879
        '16)
       '#f))
     (define-values
      (idX41 idB44)
      (#%app
       do-partial-app
       idZ43
       pillar%
       'pillar%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '103
        '13
        '2643
        '7)
       '#f))
     (define-values
      (idX45 idB48)
      (#%app
       do-partial-app
       idZ47
       south-east-wall%
       'south-east-wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '109
        '13
        '2927
        '16)
       '#f))
     (define-values
      (idX49 idB52)
      (#%app
       do-partial-app
       idZ51
       south-tee-wall%
       'south-tee-wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '112
        '13
        '3071
        '15)
       '#f))
     (define-values
      (idX53 idB56)
      (#%app
       do-partial-app
       idZ55
       south-west-wall%
       'south-west-wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '110
        '13
        '2975
        '16)
       '#f))
     (define-values
      (idX57 idB60)
      (#%app
       do-partial-app
       idZ59
       vertical-door%
       'vertical-door%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '7
        '2
        '84
        '14)
       '#f))
     (define-values
      (idX61 idB64)
      (#%app
       do-partial-app
       idZ63
       vertical-wall%
       'vertical-wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '104
        '13
        '2687
        '14)
       '#f))
     (define-values
      (idX65 idB68)
      (#%app
       do-partial-app
       idZ67
       void-cell%
       'void-cell%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '5
        '2
        '63
        '10)
       '#f))
     (define-values
      (idX69 idB72)
      (#%app
       do-partial-app
       idZ71
       wall%
       'wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '10
        '2
        '134
        '5)
       '#f))
     (define-values
      (idX73 idB76)
      (#%app
       do-partial-app
       idZ75
       west-tee-wall%
       'west-tee-wall%
       blame412
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/cell.rkt>
        '114
        '13
        '3167
        '14)
       '#f))))
   (define-values
    (g455)
    (#%app
     flat-recursive-contract10
     '(recursive-contract g461 #:flat)
     (lambda () g461)
     'g455
     'recursive-contract-val->lnp-not-yet-initialized
     '#f
     '#f))
   (define-values
    (g456)
    (#%app
     flat-recursive-contract10
     '(recursive-contract g461 #:flat)
     (lambda () g461)
     'g456
     'recursive-contract-val->lnp-not-yet-initialized
     '#f
     '#f))
   (define-values
    (g457)
    (#%app
     flat-recursive-contract10
     '(recursive-contract g461 #:flat)
     (lambda () g461)
     'g457
     'recursive-contract-val->lnp-not-yet-initialized
     '#f
     '#f))
   (define-values (g459) (lambda (x) (#%app eq? '#f x)))
   (define-values (g460) (#%app or/c-name g459 g455))
   (define-values
    (g461)
    (let-values (((check-cls-shape)
                  (#%app
                   contract-first-order
                   (let-values (((just-check-existence472)
                                 just-check-existence)
                                ((just-check-existence471)
                                 just-check-existence)
                                ((just-check-existence474)
                                 just-check-existence)
                                ((just-check-existence473)
                                 just-check-existence)
                                ((just-check-existence476)
                                 just-check-existence)
                                ((just-check-existence475)
                                 just-check-existence)
                                ((just-check-existence478)
                                 just-check-existence)
                                ((just-check-existence477)
                                 just-check-existence)
                                ((just-check-existence479)
                                 just-check-existence)
                                ((just-check-existence480)
                                 just-check-existence))
                     (let-values (((inits init-ctcs)
                                   (#%app
                                    sort-inits+contracts
                                    (#%app
                                     list
                                     (#%app
                                      cons
                                      'unsyntax
                                      just-check-existence472)
                                     (#%app
                                      cons
                                      'init*
                                      just-check-existence471)))))
                       (#%app
                        build-class/c
                        (#%app list 'unsyntax 'pubment*)
                        (#%app
                         list
                         just-check-existence479
                         just-check-existence480)
                        (#%app list 'unsyntax 'field*)
                        (#%app
                         list
                         just-check-existence474
                         just-check-existence473)
                        inits
                        init-ctcs
                        (#%app list)
                        (#%app list)
                        (#%app
                         build-internal-class/c
                         (#%app list)
                         (#%app list)
                         (#%app list)
                         (#%app list)
                         (#%app list)
                         (#%app list)
                         (#%app list)
                         (#%app list)
                         (#%app list 'unsyntax 'override*)
                         (#%app
                          list
                          just-check-existence476
                          just-check-existence475)
                         (#%app list 'unsyntax 'augment*)
                         (#%app
                          list
                          just-check-existence478
                          just-check-existence477)
                         (#%app list)
                         (#%app list))
                        '#f
                        '#f))))))
      (lambda (cls) (if (#%app class? cls) (#%app check-cls-shape cls) '#f))))
   (#%require require-typed-check)
   (#%require typed/racket/class)
   (#%require "../base/cell-types.rkt")
   (#%require
    (just-meta
     0
     (rename "message-queue.rkt" enqueue-message! enqueue-message!))
    (only "message-queue.rkt"))
   (#%app void enqueue-message!)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal dict-ref (-> CCTable Char Cell%)) #:local)
      (#%plain-app values)))
   (define-values
    (dict-ref)
    (lambda (tbl c)
      (#%plain-app
       void
       (if (#%plain-app hash? tbl)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" tbl '"'tbl : CCTable"))))
       (if (#%plain-app char? c)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" c '"'c : Char")))))
      (let-values (((or-part)
                    (let-values (((dyn-cod462) (#%app hash-ref tbl c '#f)))
                      (if (#%plain-app g460 dyn-cod462)
                        dyn-cod462
                        (#%plain-app
                         error
                         'transient-assert
                         (#%plain-app
                          format
                          '"got ~s in ~a"
                          dyn-cod462
                          '"'(#%app hash-ref ... : ((U Door% False))"))))))
        (if or-part or-part (#%app raise-user-error 'dict-ref)))))
   (define-values
    ()
    (begin
      (quote-syntax
       (:-internal dict-set! (-> CCTable Char Cell% Void))
       #:local)
      (#%plain-app values)))
   (define-values
    (dict-set!)
    (lambda (cc k v)
      (#%plain-app
       void
       (if (#%plain-app hash? cc)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" cc '"'cc : CCTable"))))
       (if (#%plain-app char? k)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" k '"'k : Char"))))
       (if (#%plain-app g455 v)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" v '"'v : Door%")))))
      (#%app hash-set! cc k v)))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal chars->cell%s CCTable) #:local)
      (#%plain-app values)))
   (define-values (chars->cell%s) (#%app make-hash))
   (define-values
    ()
    (begin
      (quote-syntax
       (:-internal register-cell-type! (-> Cell% Char Void))
       #:local)
      (#%plain-app values)))
   (define-values
    (register-cell-type!)
    (lambda (c% char)
      (#%plain-app
       void
       (if (#%plain-app g455 c%)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" c% '"'c% : Door%"))))
       (if (#%plain-app char? char)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" char '"'char : Char")))))
      (#%app dict-set! chars->cell%s char c%)))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal char->cell% (-> Char Cell%)) #:local)
      (#%plain-app values)))
   (define-values
    (char->cell%)
    (lambda (char)
      (#%plain-app
       void
       (if (#%plain-app char? char)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" char '"'char : Char")))))
      (#%app dict-ref chars->cell%s char)))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal cell% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (cell%)
    (#%app
     compose-class
     'cell%
     object%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '2
     '(items occupant)
     '()
     '()
     '()
     '()
     '()
     '()
     '(free? show open close)
     '()
     '()
     '()
     '()
     '()
     '()
     '()
     '()
     '(items occupant)
     'normal
     (lambda (local-accessor local-mutator free?2 show3 open4 close5)
       (let-values ()
         (let-values (((items6)
                       (#%app
                        make-struct-field-accessor
                        local-accessor
                        '0
                        '#f))
                      ((occupant7)
                       (#%app
                        make-struct-field-accessor
                        local-accessor
                        '1
                        '#f))
                      ((items8)
                       (#%app make-struct-field-mutator local-mutator '0 '#f))
                      ((occupant9)
                       (#%app make-struct-field-mutator local-mutator '1 '#f)))
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|free? method in cell%|)
                                                  (lambda (self2314)
                                                    (let-values ()
                                                      (let-values () '#f)))))
                                      |free? method in cell%|)
                                    '#f
                                    prop:typed-method
                                    '#t))))
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in cell%|)
                                                  (lambda (self2314)
                                                    (let-values ()
                                                      (let-values () '#\*)))))
                                      |show method in cell%|)
                                    '#f
                                    prop:typed-method
                                    '#t))))
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|open method in cell%|)
                                                  (lambda (self2314)
                                                    (let-values ()
                                                      (let-values ()
                                                        (#%app
                                                         enqueue-message!
                                                         '"Can't open that."))))))
                                      |open method in cell%|)
                                    '#f
                                    prop:typed-method
                                    '#t))))
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|close method in cell%|)
                                                  (lambda (self2314)
                                                    (let-values ()
                                                      (let-values ()
                                                        (#%app
                                                         enqueue-message!
                                                         '"Can't close that."))))))
                                      |close method in cell%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (#%app list)
                            (lambda (self2314
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-field-initialization items)
                                        (let-values (((obj) self2314))
                                          (let-values (((items)
                                                        (#%app
                                                         extract-arg
                                                         'cell%
                                                         'items
                                                         init-args
                                                         (lambda () '()))))
                                            (with-continuation-mark
                                             prop:chaperone-unsafe-undefined
                                             unsafe-undefined
                                             (#%app items8 obj items))))
                                        '(declare-field-initialization
                                          occupant)
                                        (let-values (((obj) self2314))
                                          (let-values (((occupant)
                                                        (#%app
                                                         extract-arg
                                                         'cell%
                                                         'occupant
                                                         init-args
                                                         (lambda () '#f))))
                                            (with-continuation-mark
                                             prop:chaperone-unsafe-undefined
                                             unsafe-undefined
                                             (#%app occupant9 obj occupant))))
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2314
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values (((free? show open close)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           free?2
                                                           self2314)
                                                          self2314))
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show3
                                                           self2314)
                                                          self2314))
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           open4
                                                           self2314)
                                                          self2314))
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           close5
                                                           self2314)
                                                          self2314))))
                                                     (() (#%app values))
                                                     ((items occupant)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-field-use
                                                           items)
                                                         (let-values (((obj)
                                                                       self2314))
                                                           (#%app items6 obj))
                                                         '(declare-field-assignment
                                                           items)
                                                         (let-values (((obj)
                                                                       self2314))
                                                           (let-values (((items)
                                                                         '0))
                                                             (#%app
                                                              items8
                                                              obj
                                                              items))))
                                                       (lambda ()
                                                         '(declare-field-use
                                                           occupant)
                                                         (let-values (((obj)
                                                                       self2314))
                                                           (#%app
                                                            occupant7
                                                            obj))
                                                         '(declare-field-assignment
                                                           occupant)
                                                         (let-values (((obj)
                                                                       self2314))
                                                           (let-values (((occupant)
                                                                         '0))
                                                             (#%app
                                                              occupant9
                                                              obj
                                                              occupant))))))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits
                                                           items
                                                           occupant)
                                                          (#:init)
                                                          (#:init-field
                                                           (items items)
                                                           (occupant occupant))
                                                          (#:init-rest)
                                                          (#:optional-init
                                                           items
                                                           occupant)
                                                          (#:field)
                                                          (#:public
                                                           (free? free?)
                                                           (show show)
                                                           (open open)
                                                           (close close))
                                                          (#:override)
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! cell% '#\*))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal empty-cell% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (empty-cell%)
    (#%app
     compose-class
     'empty-cell%
     cell%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '(occupant)
     '()
     '(free? show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(free? show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor
              local-mutator
              get-occupant46
              set-occupant!47
              free?42
              show43
              free?44
              show45)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|free? method in empty-cell%|)
                                                  (lambda (self2367)
                                                    (let-values ()
                                                      (let-values ()
                                                        (#%app
                                                         not
                                                         (begin
                                                           '(declare-inherit-use
                                                             occupant)
                                                           (let-values (((obj)
                                                                         self2367))
                                                             (#%app
                                                              get-occupant46
                                                              obj)))))))))
                                      |free? method in empty-cell%|)
                                    '#f
                                    prop:typed-method
                                    '#t))))
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in empty-cell%|)
                                                  (lambda (self2367)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if (begin
                                                              '(declare-inherit-use
                                                                occupant)
                                                              (let-values (((obj)
                                                                            self2367))
                                                                (#%app
                                                                 get-occupant46
                                                                 obj)))
                                                          (let-values (((temp64)
                                                                        'show))
                                                            (let-values (((temp66)
                                                                          (let-values (((or-part)
                                                                                        (begin
                                                                                          '(declare-inherit-use
                                                                                            occupant)
                                                                                          (let-values (((obj)
                                                                                                        self2367))
                                                                                            (#%app
                                                                                             get-occupant46
                                                                                             obj)))))
                                                                            (if or-part
                                                                              or-part
                                                                              (#%app
                                                                               raise-user-error
                                                                               'show)))))
                                                              (let-values (((temp65)
                                                                            (#%app
                                                                             find-method/who
                                                                             'send
                                                                             temp66
                                                                             temp64)))
                                                                (let-values ()
                                                                  (if (#%app
                                                                       wrapped-object?
                                                                       temp66)
                                                                    (if temp65
                                                                      (#%app
                                                                       temp65
                                                                       (#%app
                                                                        wrapped-object-neg-party
                                                                        temp66)
                                                                       (#%app
                                                                        wrapped-object-object
                                                                        temp66))
                                                                      (let-values (((temp66)
                                                                                    (#%app
                                                                                     wrapped-object-object
                                                                                     temp66)))
                                                                        (#%app
                                                                         (#%app
                                                                          find-method/who
                                                                          'send
                                                                          temp66
                                                                          temp64)
                                                                         temp66)))
                                                                    (#%app
                                                                     temp65
                                                                     temp66))))))
                                                          '#\space))))))
                                      |show method in empty-cell%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2367
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2367
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((occupant)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-inherit-use
                                                           occupant)
                                                         (let-values (((obj)
                                                                       self2367))
                                                           (#%app
                                                            get-occupant46
                                                            obj))
                                                         (let-values (((obj)
                                                                       self2367))
                                                           (let-values (((occupant)
                                                                         '0))
                                                             (#%app
                                                              set-occupant!47
                                                              obj
                                                              occupant))))))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((free? show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           free?44
                                                           self2367)
                                                          self2367)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          free?42
                                                          self2367))
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show45
                                                           self2367)
                                                          self2367)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show43
                                                          self2367))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (free? free?)
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field
                                                           (occupant occupant))
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! empty-cell% '#\space))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal void-cell% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (void-cell%)
    (#%app
     compose-class
     'void-cell%
     cell%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show73 show74)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in void-cell%|)
                                                  (lambda (self2412)
                                                    (let-values ()
                                                      (let-values () '#\.)))))
                                      |show method in void-cell%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2412
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2412
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show74
                                                           self2412)
                                                          self2412)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show73
                                                          self2412))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! void-cell% '#\.))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (wall%)
    (#%app
     compose-class
     'wall%
     cell%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show90 show91)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in wall%|)
                                                  (lambda (self2451)
                                                    (let-values ()
                                                      (let-values () '#\X)))))
                                      |show method in wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2451
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2451
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show91
                                                           self2451)
                                                          self2451)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show90
                                                          self2451))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! wall% '#\X))
    print-values)
   (define-values (double-bar?) '#t)
   (define-syntaxes
    (define-wall)
    (lambda (user-stx)
      (let-values (((arg) user-stx))
        (let-values (((rslt)
                      (#%app
                       (lambda (e)
                         (if (#%app stx-pair? e)
                           (if (#%app (lambda (e) null) (#%app stx-car e))
                             (#%app
                              (lambda (e)
                                (if (#%app stx-pair? e)
                                  (#%app
                                   cons/#f
                                   (#%app stx-car e)
                                   (#%app
                                    (lambda (e)
                                      (if (#%app stx-pair? e)
                                        (#%app
                                         cons/#f
                                         (#%app stx-car e)
                                         (#%app
                                          (lambda (e)
                                            (if (#%app stx-pair? e)
                                              (let-values (((mh)
                                                            (#%app stx-car e)))
                                                (if mh
                                                  (if (#%app
                                                       stx-null/#f
                                                       (#%app stx-cdr e))
                                                    mh
                                                    '#f)
                                                  '#f))
                                              '#f))
                                          (#%app stx-cdr e)))
                                        '#f))
                                    (#%app stx-cdr e)))
                                  '#f))
                              (#%app stx-cdr e))
                             '#f)
                           '#f))
                       arg)))
          (if rslt
            (let-values (((sc1) (#%app unsafe-car rslt))
                         ((sc2) (#%app unsafe-list-ref rslt '1))
                         ((sc3) (#%app unsafe-list-tail rslt '2)))
              (let-values ()
                (#%app
                 syntax-protect
                 (let-values (((loc) (#%app check-loc 'syntax/loc user-stx)))
                   (#%app
                    t-subst
                    loc
                    (quote-syntax
                     (begin
                       (define _
                         :
                         Cell%
                         (class wall%
                           (define/override (show) (if double-bar? _ _))
                           (super-new)))
                       (register-cell-type! _ _)
                       (register-cell-type! _ _)
                       (provide _)))
                    '(recur 1 recur 2 recur 3 recur 4)
                    (#%app
                     list
                     '(1 recur 4)
                     sc1
                     (#%app
                      list
                      '(recur 2)
                      (#%app list '(recur 2) (#%app list '(2 3) sc3 sc2))))
                    (#%app list '(1 2) sc1 sc2)
                    (#%app list '(1 2) sc1 sc3)
                    (#%app list '(1) sc1))))))
            (let-values (((rslt) (#%app (lambda (e) null) arg)))
              (if rslt
                (let-values ()
                  (let-values ()
                    (#%app
                     pattern-failure
                     user-stx
                     '(name single-bar double-bar))))
                (#%app raise-syntax-error '#f '"bad syntax" arg))))))))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal pillar% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (pillar%)
    (#%app
     compose-class
     'pillar%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show107 show108)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in pillar%|)
                                                  (lambda (self2490)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\#
                                                          '#\+))))))
                                      |show method in pillar%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2490
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2490
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show108
                                                           self2490)
                                                          self2490)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show107
                                                          self2490))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! pillar% '#\+))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! pillar% '#\#))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal vertical-wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (vertical-wall%)
    (#%app
     compose-class
     'vertical-wall%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show124 show125)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in vertical-wall%|)
                                                  (lambda (self2529)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\║
                                                          '#\│))))))
                                      |show method in vertical-wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2529
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2529
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show125
                                                           self2529)
                                                          self2529)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show124
                                                          self2529))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! vertical-wall% '#\│))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! vertical-wall% '#\║))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal horizontal-wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (horizontal-wall%)
    (#%app
     compose-class
     'horizontal-wall%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show141 show142)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in horizontal-wall%|)
                                                  (lambda (self2568)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\═
                                                          '#\─))))))
                                      |show method in horizontal-wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2568
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2568
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show142
                                                           self2568)
                                                          self2568)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show141
                                                          self2568))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! horizontal-wall% '#\─))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! horizontal-wall% '#\═))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal four-corner-wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (four-corner-wall%)
    (#%app
     compose-class
     'four-corner-wall%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show158 show159)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in four-corner-wall%|)
                                                  (lambda (self2607)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\╬
                                                          '#\┼))))))
                                      |show method in four-corner-wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2607
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2607
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show159
                                                           self2607)
                                                          self2607)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show158
                                                          self2607))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! four-corner-wall% '#\┼))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! four-corner-wall% '#\╬))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal north-east-wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (north-east-wall%)
    (#%app
     compose-class
     'north-east-wall%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show175 show176)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in north-east-wall%|)
                                                  (lambda (self2646)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\╗
                                                          '#\┐))))))
                                      |show method in north-east-wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2646
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2646
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show176
                                                           self2646)
                                                          self2646)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show175
                                                          self2646))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! north-east-wall% '#\┐))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! north-east-wall% '#\╗))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal north-west-wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (north-west-wall%)
    (#%app
     compose-class
     'north-west-wall%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show192 show193)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in north-west-wall%|)
                                                  (lambda (self2685)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\╔
                                                          '#\┌))))))
                                      |show method in north-west-wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2685
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2685
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show193
                                                           self2685)
                                                          self2685)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show192
                                                          self2685))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! north-west-wall% '#\┌))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! north-west-wall% '#\╔))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal south-east-wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (south-east-wall%)
    (#%app
     compose-class
     'south-east-wall%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show209 show210)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in south-east-wall%|)
                                                  (lambda (self2724)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\╝
                                                          '#\┘))))))
                                      |show method in south-east-wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2724
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2724
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show210
                                                           self2724)
                                                          self2724)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show209
                                                          self2724))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! south-east-wall% '#\┘))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! south-east-wall% '#\╝))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal south-west-wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (south-west-wall%)
    (#%app
     compose-class
     'south-west-wall%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show226 show227)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in south-west-wall%|)
                                                  (lambda (self2763)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\╚
                                                          '#\└))))))
                                      |show method in south-west-wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2763
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2763
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show227
                                                           self2763)
                                                          self2763)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show226
                                                          self2763))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! south-west-wall% '#\└))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! south-west-wall% '#\╚))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal north-tee-wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (north-tee-wall%)
    (#%app
     compose-class
     'north-tee-wall%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show243 show244)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in north-tee-wall%|)
                                                  (lambda (self2802)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\╦
                                                          '#\┬))))))
                                      |show method in north-tee-wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2802
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2802
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show244
                                                           self2802)
                                                          self2802)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show243
                                                          self2802))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! north-tee-wall% '#\┬))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! north-tee-wall% '#\╦))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal south-tee-wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (south-tee-wall%)
    (#%app
     compose-class
     'south-tee-wall%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show260 show261)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in south-tee-wall%|)
                                                  (lambda (self2841)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\╩
                                                          '#\┴))))))
                                      |show method in south-tee-wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2841
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2841
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show261
                                                           self2841)
                                                          self2841)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show260
                                                          self2841))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! south-tee-wall% '#\┴))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! south-tee-wall% '#\╩))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal east-tee-wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (east-tee-wall%)
    (#%app
     compose-class
     'east-tee-wall%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show277 show278)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in east-tee-wall%|)
                                                  (lambda (self2880)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\╣
                                                          '#\┤))))))
                                      |show method in east-tee-wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2880
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2880
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show278
                                                           self2880)
                                                          self2880)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show277
                                                          self2880))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! east-tee-wall% '#\┤))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! east-tee-wall% '#\╣))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal west-tee-wall% Cell%) #:local)
      (#%plain-app values)))
   (define-values
    (west-tee-wall%)
    (#%app
     compose-class
     'west-tee-wall%
     wall%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor local-mutator show294 show295)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in west-tee-wall%|)
                                                  (lambda (self2919)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if double-bar?
                                                          '#\╠
                                                          '#\├))))))
                                      |show method in west-tee-wall%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2919
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2919
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show295
                                                           self2919)
                                                          self2919)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show294
                                                          self2919))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field)
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! west-tee-wall% '#\├))
    print-values)
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! west-tee-wall% '#\╠))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal door% Door%) #:local)
      (#%plain-app values)))
   (define-values
    (door%)
    (#%app
     compose-class
     'door%
     cell%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '(occupant)
     '()
     '(free? open close)
     '()
     '()
     '()
     '()
     '()
     '()
     '(free? open close)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor
              local-mutator
              get-occupant317
              set-occupant!318
              free?311
              open312
              close313
              free?314
              open315
              close316)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|free? method in door%|)
                                                  (lambda (self2958)
                                                    (let-values ()
                                                      (let-values ()
                                                        (#%app
                                                         not
                                                         (begin
                                                           '(declare-inherit-use
                                                             occupant)
                                                           (let-values (((obj)
                                                                         self2958))
                                                             (#%app
                                                              get-occupant317
                                                              obj)))))))))
                                      |free? method in door%|)
                                    '#f
                                    prop:typed-method
                                    '#t))))
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|open method in door%|)
                                                  (lambda (self2958)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if '#t
                                                          (#%app
                                                           enqueue-message!
                                                           '"The door is already open.")
                                                          (#%app void)))))))
                                      |open method in door%|)
                                    '#f
                                    prop:typed-method
                                    '#t))))
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|close method in door%|)
                                                  (lambda (self2958)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if '#t
                                                          (#%app void)
                                                          (#%app
                                                           enqueue-message!
                                                           '"The door is already closed.")))))))
                                      |close method in door%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self2958
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self2958
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((occupant)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-inherit-use
                                                           occupant)
                                                         (let-values (((obj)
                                                                       self2958))
                                                           (#%app
                                                            get-occupant317
                                                            obj))
                                                         (let-values (((obj)
                                                                       self2958))
                                                           (let-values (((occupant)
                                                                         '0))
                                                             (#%app
                                                              set-occupant!318
                                                              obj
                                                              occupant))))))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((free? open close)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           free?314
                                                           self2958)
                                                          self2958)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          free?311
                                                          self2958))
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           open315
                                                           self2958)
                                                          self2958)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          open312
                                                          self2958))
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           close316
                                                           self2958)
                                                          self2958)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          close313
                                                          self2958))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (free? free?)
                                                           (open open)
                                                           (close close))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field
                                                           (occupant occupant))
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal vertical-door% Door%) #:local)
      (#%plain-app values)))
   (define-values
    (vertical-door%)
    (#%app
     compose-class
     'vertical-door%
     door%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '(occupant)
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor
              local-mutator
              get-occupant347
              set-occupant!348
              show345
              show346)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in vertical-door%|)
                                                  (lambda (self3009)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if '#t
                                                          (if (begin
                                                                '(declare-inherit-use
                                                                  occupant)
                                                                (let-values (((obj)
                                                                              self3009))
                                                                  (#%app
                                                                   get-occupant347
                                                                   obj)))
                                                            (let-values (((temp360)
                                                                          'show))
                                                              (let-values (((temp362)
                                                                            (let-values (((or-part)
                                                                                          (begin
                                                                                            '(declare-inherit-use
                                                                                              occupant)
                                                                                            (let-values (((obj)
                                                                                                          self3009))
                                                                                              (#%app
                                                                                               get-occupant347
                                                                                               obj)))))
                                                                              (if or-part
                                                                                or-part
                                                                                (#%app
                                                                                 raise-user-error
                                                                                 'vdoor)))))
                                                                (let-values (((temp361)
                                                                              (#%app
                                                                               find-method/who
                                                                               'send
                                                                               temp362
                                                                               temp360)))
                                                                  (let-values ()
                                                                    (if (#%app
                                                                         wrapped-object?
                                                                         temp362)
                                                                      (if temp361
                                                                        (#%app
                                                                         temp361
                                                                         (#%app
                                                                          wrapped-object-neg-party
                                                                          temp362)
                                                                         (#%app
                                                                          wrapped-object-object
                                                                          temp362))
                                                                        (let-values (((temp362)
                                                                                      (#%app
                                                                                       wrapped-object-object
                                                                                       temp362)))
                                                                          (#%app
                                                                           (#%app
                                                                            find-method/who
                                                                            'send
                                                                            temp362
                                                                            temp360)
                                                                           temp362)))
                                                                      (#%app
                                                                       temp361
                                                                       temp362))))))
                                                            '#\_)
                                                          '#\|))))))
                                      |show method in vertical-door%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self3009
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self3009
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((occupant)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-inherit-use
                                                           occupant)
                                                         (let-values (((obj)
                                                                       self3009))
                                                           (#%app
                                                            get-occupant347
                                                            obj))
                                                         (let-values (((obj)
                                                                       self3009))
                                                           (let-values (((occupant)
                                                                         '0))
                                                             (#%app
                                                              set-occupant!348
                                                              obj
                                                              occupant))))))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show346
                                                           self3009)
                                                          self3009)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show345
                                                          self3009))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field
                                                           (occupant occupant))
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! vertical-door% '#\|))
    print-values)
   (#%app
    call-with-values
    (lambda ()
      (#%app
       register-cell-type!
       (#%app
        compose-class
        '...geon/tagged/cell.rkt:142:21
        vertical-door%
        (#%app list)
        (#%app current-inspector)
        '#f
        '#f
        '0
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        'normal
        (lambda (local-accessor local-mutator)
          (let-values ()
            (let-values ()
              (let-values ()
                (let-values ()
                  (let-values ()
                    (let-values ()
                      (let-values ()
                        (let-values ()
                          (let-values ()
                            (letrec-values ()
                              (#%app
                               values
                               (#%app list)
                               (#%app list)
                               (#%app list)
                               (lambda (self3048
                                        super-go
                                        si_c
                                        si_inited?
                                        si_leftovers
                                        init-args)
                                 (let-values ()
                                   (let-values ()
                                     (let-values ()
                                       (let-values ()
                                         (let-values ()
                                           (#%app void)
                                           '(declare-field-use-start)
                                           '(declare-super-new)
                                           (#%app
                                            super-go
                                            self3048
                                            si_c
                                            si_inited?
                                            si_leftovers
                                            null
                                            (#%app list))
                                           (#%app void)
                                           (let-values ((() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values)))
                                             (#%app void))
                                           (let-values ((()
                                                         (begin
                                                           (quote-syntax
                                                            (class-internal
                                                             (#:forall)
                                                             (#:all-inits)
                                                             (#:init)
                                                             (#:init-field)
                                                             (#:init-rest)
                                                             (#:optional-init)
                                                             (#:field)
                                                             (#:public)
                                                             (#:override)
                                                             (#:private)
                                                             (#:private-field)
                                                             (#:inherit)
                                                             (#:inherit-field)
                                                             (#:augment)
                                                             (#:pubment))
                                                            #:local)
                                                           (#%plain-app
                                                            values))))
                                             (#%app void))))))))))))))))))))
        '#f
        '#f)
       '#\_))
    print-values)
   (define-values
    ()
    (begin
      (quote-syntax (:-internal horizontal-door% Door%) #:local)
      (#%plain-app values)))
   (define-values
    (horizontal-door%)
    (#%app
     compose-class
     'horizontal-door%
     door%
     (#%app list)
     (#%app current-inspector)
     '#f
     '#f
     '0
     '()
     '(occupant)
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     '(show)
     '()
     '()
     '()
     '()
     '()
     '()
     'normal
     (lambda (local-accessor
              local-mutator
              get-occupant381
              set-occupant!382
              show379
              show380)
       (let-values ()
         (let-values ()
           (let-values ()
             (let-values ()
               (let-values ()
                 (let-values ()
                   (let-values ()
                     (let-values ()
                       (let-values ()
                         (letrec-values ()
                           (#%app
                            values
                            (#%app list)
                            (#%app
                             list
                             (let-values ()
                               (let-values ()
                                 (let-values ()
                                   (#%app
                                    chaperone-procedure
                                    (let-values (((|show method in horizontal-door%|)
                                                  (lambda (self3081)
                                                    (let-values ()
                                                      (let-values ()
                                                        (if '#t
                                                          (if (begin
                                                                '(declare-inherit-use
                                                                  occupant)
                                                                (let-values (((obj)
                                                                              self3081))
                                                                  (#%app
                                                                   get-occupant381
                                                                   obj)))
                                                            (let-values (((temp394)
                                                                          'show))
                                                              (let-values (((temp396)
                                                                            (let-values (((or-part)
                                                                                          (begin
                                                                                            '(declare-inherit-use
                                                                                              occupant)
                                                                                            (let-values (((obj)
                                                                                                          self3081))
                                                                                              (#%app
                                                                                               get-occupant381
                                                                                               obj)))))
                                                                              (if or-part
                                                                                or-part
                                                                                (#%app
                                                                                 raise-user-error
                                                                                 'hdoor)))))
                                                                (let-values (((temp395)
                                                                              (#%app
                                                                               find-method/who
                                                                               'send
                                                                               temp396
                                                                               temp394)))
                                                                  (let-values ()
                                                                    (if (#%app
                                                                         wrapped-object?
                                                                         temp396)
                                                                      (if temp395
                                                                        (#%app
                                                                         temp395
                                                                         (#%app
                                                                          wrapped-object-neg-party
                                                                          temp396)
                                                                         (#%app
                                                                          wrapped-object-object
                                                                          temp396))
                                                                        (let-values (((temp396)
                                                                                      (#%app
                                                                                       wrapped-object-object
                                                                                       temp396)))
                                                                          (#%app
                                                                           (#%app
                                                                            find-method/who
                                                                            'send
                                                                            temp396
                                                                            temp394)
                                                                           temp396)))
                                                                      (#%app
                                                                       temp395
                                                                       temp396))))))
                                                            '#\')
                                                          '#\-))))))
                                      |show method in horizontal-door%|)
                                    '#f
                                    prop:typed-method
                                    '#t)))))
                            (#%app list)
                            (lambda (self3081
                                     super-go
                                     si_c
                                     si_inited?
                                     si_leftovers
                                     init-args)
                              (let-values ()
                                (let-values ()
                                  (let-values ()
                                    (let-values ()
                                      (let-values ()
                                        (#%app void)
                                        '(declare-field-use-start)
                                        '(declare-super-new)
                                        (#%app
                                         super-go
                                         self3081
                                         si_c
                                         si_inited?
                                         si_leftovers
                                         null
                                         (#%app list))
                                        (#%app void)
                                        (let-values ((() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((occupant)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-inherit-use
                                                           occupant)
                                                         (let-values (((obj)
                                                                       self3081))
                                                           (#%app
                                                            get-occupant381
                                                            obj))
                                                         (let-values (((obj)
                                                                       self3081))
                                                           (let-values (((occupant)
                                                                         '0))
                                                             (#%app
                                                              set-occupant!382
                                                              obj
                                                              occupant))))))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     (() (#%app values))
                                                     ((show)
                                                      (#%app
                                                       values
                                                       (lambda ()
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          (#%app
                                                           show380
                                                           self3081)
                                                          self3081)
                                                         '(declare-this-escapes)
                                                         (#%app
                                                          show379
                                                          self3081))))
                                                     (() (#%app values)))
                                          (#%app void))
                                        (let-values ((()
                                                      (begin
                                                        (quote-syntax
                                                         (class-internal
                                                          (#:forall)
                                                          (#:all-inits)
                                                          (#:init)
                                                          (#:init-field)
                                                          (#:init-rest)
                                                          (#:optional-init)
                                                          (#:field)
                                                          (#:public)
                                                          (#:override
                                                           (show show))
                                                          (#:private)
                                                          (#:private-field)
                                                          (#:inherit)
                                                          (#:inherit-field
                                                           (occupant occupant))
                                                          (#:augment)
                                                          (#:pubment))
                                                         #:local)
                                                        (#%plain-app values))))
                                          (#%app void))))))))))))))))))))
     '#f
     '#f))
   (#%app
    call-with-values
    (lambda () (#%app register-cell-type! horizontal-door% '#\-))
    print-values)
   (#%app
    call-with-values
    (lambda ()
      (#%app
       register-cell-type!
       (#%app
        compose-class
        '...geon/tagged/cell.rkt:153:21
        horizontal-door%
        (#%app list)
        (#%app current-inspector)
        '#f
        '#f
        '0
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        'normal
        (lambda (local-accessor local-mutator)
          (let-values ()
            (let-values ()
              (let-values ()
                (let-values ()
                  (let-values ()
                    (let-values ()
                      (let-values ()
                        (let-values ()
                          (let-values ()
                            (letrec-values ()
                              (#%app
                               values
                               (#%app list)
                               (#%app list)
                               (#%app list)
                               (lambda (self3120
                                        super-go
                                        si_c
                                        si_inited?
                                        si_leftovers
                                        init-args)
                                 (let-values ()
                                   (let-values ()
                                     (let-values ()
                                       (let-values ()
                                         (let-values ()
                                           (#%app void)
                                           '(declare-field-use-start)
                                           '(declare-super-new)
                                           (#%app
                                            super-go
                                            self3120
                                            si_c
                                            si_inited?
                                            si_leftovers
                                            null
                                            (#%app list))
                                           (#%app void)
                                           (let-values ((() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values))
                                                        (() (#%app values)))
                                             (#%app void))
                                           (let-values ((()
                                                         (begin
                                                           (quote-syntax
                                                            (class-internal
                                                             (#:forall)
                                                             (#:all-inits)
                                                             (#:init)
                                                             (#:init-field)
                                                             (#:init-rest)
                                                             (#:optional-init)
                                                             (#:field)
                                                             (#:public)
                                                             (#:override)
                                                             (#:private)
                                                             (#:private-field)
                                                             (#:inherit)
                                                             (#:inherit-field)
                                                             (#:augment)
                                                             (#:pubment))
                                                            #:local)
                                                           (#%plain-app
                                                            values))))
                                             (#%app void))))))))))))))))))))
        '#f
        '#f)
       '#\'))
    print-values)
   (define-syntaxes
    (char->cell%)
    (#%app make-redirect413 (quote-syntax char->cell%)))
   (define-syntaxes
    (char->cell%)
    (#%app
     make-typed-renaming
     (t-quote-syntax char->cell%)
     (t-quote-syntax char->cell%)
     'transient))
   (define-syntaxes (door%) (#%app make-redirect413 (quote-syntax door%)))
   (define-syntaxes
    (door%)
    (#%app
     make-typed-renaming
     (t-quote-syntax door%)
     (t-quote-syntax door%)
     'transient))
   (define-syntaxes
    (east-tee-wall%)
    (#%app make-redirect413 (quote-syntax east-tee-wall%)))
   (define-syntaxes
    (east-tee-wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax east-tee-wall%)
     (t-quote-syntax east-tee-wall%)
     'transient))
   (define-syntaxes
    (empty-cell%)
    (#%app make-redirect413 (quote-syntax empty-cell%)))
   (define-syntaxes
    (empty-cell%)
    (#%app
     make-typed-renaming
     (t-quote-syntax empty-cell%)
     (t-quote-syntax empty-cell%)
     'transient))
   (define-syntaxes
    (four-corner-wall%)
    (#%app make-redirect413 (quote-syntax four-corner-wall%)))
   (define-syntaxes
    (four-corner-wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax four-corner-wall%)
     (t-quote-syntax four-corner-wall%)
     'transient))
   (define-syntaxes
    (horizontal-door%)
    (#%app make-redirect413 (quote-syntax horizontal-door%)))
   (define-syntaxes
    (horizontal-door%)
    (#%app
     make-typed-renaming
     (t-quote-syntax horizontal-door%)
     (t-quote-syntax horizontal-door%)
     'transient))
   (define-syntaxes
    (horizontal-wall%)
    (#%app make-redirect413 (quote-syntax horizontal-wall%)))
   (define-syntaxes
    (horizontal-wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax horizontal-wall%)
     (t-quote-syntax horizontal-wall%)
     'transient))
   (define-syntaxes
    (north-east-wall%)
    (#%app make-redirect413 (quote-syntax north-east-wall%)))
   (define-syntaxes
    (north-east-wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax north-east-wall%)
     (t-quote-syntax north-east-wall%)
     'transient))
   (define-syntaxes
    (north-tee-wall%)
    (#%app make-redirect413 (quote-syntax north-tee-wall%)))
   (define-syntaxes
    (north-tee-wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax north-tee-wall%)
     (t-quote-syntax north-tee-wall%)
     'transient))
   (define-syntaxes
    (north-west-wall%)
    (#%app make-redirect413 (quote-syntax north-west-wall%)))
   (define-syntaxes
    (north-west-wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax north-west-wall%)
     (t-quote-syntax north-west-wall%)
     'transient))
   (define-syntaxes (pillar%) (#%app make-redirect413 (quote-syntax pillar%)))
   (define-syntaxes
    (pillar%)
    (#%app
     make-typed-renaming
     (t-quote-syntax pillar%)
     (t-quote-syntax pillar%)
     'transient))
   (define-syntaxes
    (south-east-wall%)
    (#%app make-redirect413 (quote-syntax south-east-wall%)))
   (define-syntaxes
    (south-east-wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax south-east-wall%)
     (t-quote-syntax south-east-wall%)
     'transient))
   (define-syntaxes
    (south-tee-wall%)
    (#%app make-redirect413 (quote-syntax south-tee-wall%)))
   (define-syntaxes
    (south-tee-wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax south-tee-wall%)
     (t-quote-syntax south-tee-wall%)
     'transient))
   (define-syntaxes
    (south-west-wall%)
    (#%app make-redirect413 (quote-syntax south-west-wall%)))
   (define-syntaxes
    (south-west-wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax south-west-wall%)
     (t-quote-syntax south-west-wall%)
     'transient))
   (define-syntaxes
    (vertical-door%)
    (#%app make-redirect413 (quote-syntax vertical-door%)))
   (define-syntaxes
    (vertical-door%)
    (#%app
     make-typed-renaming
     (t-quote-syntax vertical-door%)
     (t-quote-syntax vertical-door%)
     'transient))
   (define-syntaxes
    (vertical-wall%)
    (#%app make-redirect413 (quote-syntax vertical-wall%)))
   (define-syntaxes
    (vertical-wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax vertical-wall%)
     (t-quote-syntax vertical-wall%)
     'transient))
   (define-syntaxes
    (void-cell%)
    (#%app make-redirect413 (quote-syntax void-cell%)))
   (define-syntaxes
    (void-cell%)
    (#%app
     make-typed-renaming
     (t-quote-syntax void-cell%)
     (t-quote-syntax void-cell%)
     'transient))
   (define-syntaxes (wall%) (#%app make-redirect413 (quote-syntax wall%)))
   (define-syntaxes
    (wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax wall%)
     (t-quote-syntax wall%)
     'transient))
   (define-syntaxes
    (west-tee-wall%)
    (#%app make-redirect413 (quote-syntax west-tee-wall%)))
   (define-syntaxes
    (west-tee-wall%)
    (#%app
     make-typed-renaming
     (t-quote-syntax west-tee-wall%)
     (t-quote-syntax west-tee-wall%)
     'transient))
   (#%provide char->cell%)
   (#%provide door%)
   (#%provide east-tee-wall%)
   (#%provide empty-cell%)
   (#%provide four-corner-wall%)
   (#%provide horizontal-door%)
   (#%provide horizontal-wall%)
   (#%provide north-east-wall%)
   (#%provide north-tee-wall%)
   (#%provide north-west-wall%)
   (#%provide pillar%)
   (#%provide south-east-wall%)
   (#%provide south-tee-wall%)
   (#%provide south-west-wall%)
   (#%provide vertical-door%)
   (#%provide vertical-wall%)
   (#%provide void-cell% void-cell%)
   (#%provide wall%)
   (#%provide west-tee-wall%)
   (#%provide)
   (#%app void)))
