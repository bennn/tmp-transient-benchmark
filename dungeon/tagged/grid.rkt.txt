(module grid typed/racket
  (#%module-begin
   (module configure-runtime '#%kernel
     (#%module-begin (#%require racket/runtime-config) (#%app configure '#f)))
   (#%require (submod typed-racket/private/type-contract predicates))
   (#%require typed-racket/utils/utils)
   (#%require (for-meta 1 typed-racket/utils/utils))
   (#%require typed-racket/utils/any-wrap)
   (#%require typed-racket/utils/struct-type-c)
   (#%require typed-racket/utils/prefab-c)
   (#%require typed-racket/utils/opaque-object)
   (#%require typed-racket/utils/evt-contract)
   (#%require typed-racket/utils/hash-contract)
   (#%require typed-racket/utils/vector-contract)
   (#%require typed-racket/utils/sealing-contract)
   (#%require typed-racket/utils/promise-not-name-contract)
   (#%require typed-racket/utils/simple-result-arrow)
   (#%require racket/sequence)
   (#%require racket/contract/parametric)
   (begin-for-syntax
    (module*
     #%type-decl
     #f
     (#%plain-module-begin
      (#%declare #:empty-namespace)
      (#%require typed-racket/types/numeric-tower)
      (#%require typed-racket/env/type-name-env)
      (#%require typed-racket/env/global-env)
      (#%require typed-racket/env/type-alias-env)
      (#%require typed-racket/types/struct-table)
      (#%require typed-racket/types/abbrev)
      (#%require
       (just-meta 0 (rename racket/private/sort raw-sort sort))
       (just-meta 0 (rename racket/private/sort vector-sort! vector-sort!))
       (just-meta 0 (rename racket/private/sort vector-sort vector-sort))
       (only racket/private/sort))
      (define-values (g1716) (#%app make-Name (quote-syntax Cell%) '0 '#f))
      (define-values (g1717) (#%app make-Instance g1716))
      (define-values (g1718) (#%app -ivec g1717))
      (define-values (g1719) (#%app -mvec g1717))
      (define-values (g1720) (#%app Un g1718 g1719))
      (define-values (g1721) (#%app -ivec g1720))
      (define-values (g1722) (#%app -mvec g1720))
      (define-values (g1723) (#%app Un g1721 g1722))
      (define-values (g1724) (#%app -ivec* -Index -Index))
      (define-values (g1725) (#%app -mvec* -Index -Index))
      (define-values (g1726) (#%app Un g1724 g1725))
      (#%app
       register-type
       (t-quote-syntax array-set!)
       (#%app simple-> (#%app list g1723 g1726 g1717) -Void))
      (#%app
       register-type
       (t-quote-syntax build-array)
       (#%app
        simple->
        (#%app list g1726 (#%app simple-> (#%app list g1726) g1717))
        g1723))
      (#%app
       register-type
       (t-quote-syntax down)
       (let-values (((temp1) (#%app list g1726))
                    ((temp2) (#%app list -Index))
                    ((temp3)
                     (#%app make-Values (#%app list (#%app -result g1726)))))
         (if (#%app
              variable-reference-constant?
              (#%variable-reference opt-fn22))
           (#%app opt-fn null '#f temp1 temp2 temp3)
           (#%app opt-fn22 temp1 temp2 temp3))))
      (#%app
       register-type
       (t-quote-syntax grid-height)
       (#%app simple-> (#%app list g1723) -Index))
      (#%app
       register-type
       (t-quote-syntax grid-ref)
       (#%app simple-> (#%app list g1723 g1726) (#%app Un -False g1717)))
      (#%app
       register-type
       (t-quote-syntax grid-width)
       (#%app simple-> (#%app list g1723) -Index))
      (#%app
       register-type
       (t-quote-syntax left)
       (let-values (((temp4) (#%app list g1726))
                    ((temp5) (#%app list -Index))
                    ((temp6)
                     (#%app make-Values (#%app list (#%app -result g1726)))))
         (if (#%app
              variable-reference-constant?
              (#%variable-reference opt-fn22))
           (#%app opt-fn null '#f temp4 temp5 temp6)
           (#%app opt-fn22 temp4 temp5 temp6))))
      (#%app
       register-type
       (t-quote-syntax parse-grid)
       (#%app simple-> (#%app list (#%app -lst -String)) g1723))
      (#%app
       register-type
       (t-quote-syntax right)
       (let-values (((temp7) (#%app list g1726))
                    ((temp8) (#%app list -Index))
                    ((temp9)
                     (#%app make-Values (#%app list (#%app -result g1726)))))
         (if (#%app
              variable-reference-constant?
              (#%variable-reference opt-fn22))
           (#%app opt-fn null '#f temp7 temp8 temp9)
           (#%app opt-fn22 temp7 temp8 temp9))))
      (#%app
       register-type
       (t-quote-syntax show-grid)
       (#%app simple-> (#%app list g1723) -String))
      (#%app
       register-type
       (t-quote-syntax up)
       (let-values (((temp10) (#%app list g1726))
                    ((temp11) (#%app list -Index))
                    ((temp12)
                     (#%app make-Values (#%app list (#%app -result g1726)))))
         (if (#%app
              variable-reference-constant?
              (#%variable-reference opt-fn22))
           (#%app opt-fn null '#f temp10 temp11 temp12)
           (#%app opt-fn22 temp10 temp11 temp12))))
      (#%app
       register-type
       (t-quote-syntax within-grid?)
       (#%app simple-> (#%app list g1723 g1726) -Boolean))
      (#%app
       register-type
       (t-quote-syntax array-set!)
       (#%app simple-> (#%app list g1723 g1726 g1717) -Void))
      (#%app
       register-type
       (t-quote-syntax build-array)
       (#%app
        simple->
        (#%app list g1726 (#%app simple-> (#%app list g1726) g1717))
        g1723))
      (#%app
       register-type
       (t-quote-syntax down)
       (let-values (((temp13) (#%app list g1726))
                    ((temp14) (#%app list -Index))
                    ((temp15)
                     (#%app make-Values (#%app list (#%app -result g1726)))))
         (if (#%app
              variable-reference-constant?
              (#%variable-reference opt-fn22))
           (#%app opt-fn null '#f temp13 temp14 temp15)
           (#%app opt-fn22 temp13 temp14 temp15))))
      (#%app
       register-type
       (t-quote-syntax grid-height)
       (#%app simple-> (#%app list g1723) -Index))
      (#%app
       register-type
       (t-quote-syntax grid-ref)
       (#%app simple-> (#%app list g1723 g1726) (#%app Un -False g1717)))
      (#%app
       register-type
       (t-quote-syntax grid-width)
       (#%app simple-> (#%app list g1723) -Index))
      (#%app
       register-type
       (t-quote-syntax left)
       (let-values (((temp16) (#%app list g1726))
                    ((temp17) (#%app list -Index))
                    ((temp18)
                     (#%app make-Values (#%app list (#%app -result g1726)))))
         (if (#%app
              variable-reference-constant?
              (#%variable-reference opt-fn22))
           (#%app opt-fn null '#f temp16 temp17 temp18)
           (#%app opt-fn22 temp16 temp17 temp18))))
      (#%app
       register-type
       (t-quote-syntax right)
       (let-values (((temp19) (#%app list g1726))
                    ((temp20) (#%app list -Index))
                    ((temp21)
                     (#%app make-Values (#%app list (#%app -result g1726)))))
         (if (#%app
              variable-reference-constant?
              (#%variable-reference opt-fn22))
           (#%app opt-fn null '#f temp19 temp20 temp21)
           (#%app opt-fn22 temp19 temp20 temp21))))
      (#%app
       register-type
       (t-quote-syntax show-grid)
       (#%app simple-> (#%app list g1723) -String))
      (#%app
       register-type
       (t-quote-syntax up)
       (let-values (((temp22) (#%app list g1726))
                    ((temp23) (#%app list -Index))
                    ((temp24)
                     (#%app make-Values (#%app list (#%app -result g1726)))))
         (if (#%app
              variable-reference-constant?
              (#%variable-reference opt-fn22))
           (#%app opt-fn null '#f temp22 temp23 temp24)
           (#%app opt-fn22 temp22 temp23 temp24)))))))
   (begin-for-syntax
    (#%app
     add-mod!
     (#%app variable-reference->module-path-index (#%variable-reference))))
   (define-values
    (blame13)
    (#%app
     module-name-fixup
     (#%app variable-reference->module-source/submod (#%variable-reference))
     (#%app list)))
   (begin-for-syntax
    (#%require typed-racket/utils/redirect-contract)
    (module #%contract-defs-reference racket/base
      (#%module-begin
       (module configure-runtime '#%kernel
         (#%module-begin
          (#%require racket/runtime-config)
          (#%app configure '#f)))
       (#%require racket/runtime-path)
       (#%require (for-meta 1 racket/base))
       (define-values
        (contract-defs-submod)
        (let-values (((contract-defs-submod)
                      (let-values (((runtime?) '#t))
                        (#%app
                         list
                         'module
                         '(submod ".." #%contract-defs)
                         (#%variable-reference)))))
          (let-values (((get-dir) void))
            (#%app
             apply
             values
             (#%app
              resolve-paths
              (#%variable-reference)
              get-dir
              (#%app list contract-defs-submod))))))
       (begin-for-syntax
        (#%app
         register-ext-files
         (#%variable-reference)
         (let-values (((contract-defs-submod)
                       (let-values (((runtime?) '#f))
                         (#%app
                          list
                          'module
                          '(submod ".." #%contract-defs)
                          (#%variable-reference)))))
           (#%app list contract-defs-submod))))
       (#%provide contract-defs-submod)))
    (#%require (submod "." #%contract-defs-reference))
    (define-values
     (make-redirect14)
     (#%app make-make-redirect-to-contract contract-defs-submod)))
   (module*
    #%contract-defs
    #f
    (#%plain-module-begin
     (#%declare #:empty-namespace)
     (#%require (submod typed-racket/private/type-contract predicates))
     (#%require typed-racket/utils/utils)
     (#%require (for-meta 1 typed-racket/utils/utils))
     (#%require typed-racket/utils/any-wrap)
     (#%require typed-racket/utils/struct-type-c)
     (#%require typed-racket/utils/prefab-c)
     (#%require typed-racket/utils/opaque-object)
     (#%require typed-racket/utils/evt-contract)
     (#%require typed-racket/utils/hash-contract)
     (#%require typed-racket/utils/vector-contract)
     (#%require typed-racket/utils/sealing-contract)
     (#%require typed-racket/utils/promise-not-name-contract)
     (#%require typed-racket/utils/simple-result-arrow)
     (#%require racket/sequence)
     (#%require racket/contract/parametric)
     (define-values (generated-contract15) any/c/proc)
     (define-values
      (idZ3)
      (let-values (((array-set!)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract15)))
        array-set!))
     (define-syntaxes
      (array-set!)
      (#%app
       make-provide/contract-transformer
       (quote-syntax array-set!)
       (quote-syntax idZ3)
       (quote-syntax array-set!)
       '#f
       '#f
       (quote-syntax idX1)
       (quote-syntax idB4)))
     (#%provide array-set!)
     (define-values (generated-contract16) any/c/proc)
     (define-values
      (idZ7)
      (let-values (((build-array)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract16)))
        build-array))
     (define-syntaxes
      (build-array)
      (#%app
       make-provide/contract-transformer
       (quote-syntax build-array)
       (quote-syntax idZ7)
       (quote-syntax build-array)
       '#f
       '#f
       (quote-syntax idX5)
       (quote-syntax idB8)))
     (#%provide build-array)
     (define-values (generated-contract17) any/c/proc)
     (define-values
      (idZ11)
      (let-values (((down)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract17)))
        down))
     (define-syntaxes
      (down)
      (#%app
       make-provide/contract-transformer
       (quote-syntax down)
       (quote-syntax idZ11)
       (quote-syntax down)
       '#f
       '#f
       (quote-syntax idX9)
       (quote-syntax idB12)))
     (#%provide down)
     (define-values (generated-contract18) any/c/proc)
     (define-values
      (idZ15)
      (let-values (((grid-height)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract18)))
        grid-height))
     (define-syntaxes
      (grid-height)
      (#%app
       make-provide/contract-transformer
       (quote-syntax grid-height)
       (quote-syntax idZ15)
       (quote-syntax grid-height)
       '#f
       '#f
       (quote-syntax idX13)
       (quote-syntax idB16)))
     (#%provide grid-height)
     (define-values (generated-contract19) any/c/proc)
     (define-values
      (idZ19)
      (let-values (((grid-ref)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract19)))
        grid-ref))
     (define-syntaxes
      (grid-ref)
      (#%app
       make-provide/contract-transformer
       (quote-syntax grid-ref)
       (quote-syntax idZ19)
       (quote-syntax grid-ref)
       '#f
       '#f
       (quote-syntax idX17)
       (quote-syntax idB20)))
     (#%provide grid-ref)
     (define-values (generated-contract20) any/c/proc)
     (define-values
      (idZ23)
      (let-values (((grid-width)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract20)))
        grid-width))
     (define-syntaxes
      (grid-width)
      (#%app
       make-provide/contract-transformer
       (quote-syntax grid-width)
       (quote-syntax idZ23)
       (quote-syntax grid-width)
       '#f
       '#f
       (quote-syntax idX21)
       (quote-syntax idB24)))
     (#%provide grid-width)
     (define-values (generated-contract21) any/c/proc)
     (define-values
      (idZ27)
      (let-values (((left)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract21)))
        left))
     (define-syntaxes
      (left)
      (#%app
       make-provide/contract-transformer
       (quote-syntax left)
       (quote-syntax idZ27)
       (quote-syntax left)
       '#f
       '#f
       (quote-syntax idX25)
       (quote-syntax idB28)))
     (#%provide left)
     (define-values (generated-contract22) any/c/proc)
     (define-values
      (idZ31)
      (let-values (((right)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract22)))
        right))
     (define-syntaxes
      (right)
      (#%app
       make-provide/contract-transformer
       (quote-syntax right)
       (quote-syntax idZ31)
       (quote-syntax right)
       '#f
       '#f
       (quote-syntax idX29)
       (quote-syntax idB32)))
     (#%provide right)
     (define-values (generated-contract23) any/c/proc)
     (define-values
      (idZ35)
      (let-values (((show-grid)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract23)))
        show-grid))
     (define-syntaxes
      (show-grid)
      (#%app
       make-provide/contract-transformer
       (quote-syntax show-grid)
       (quote-syntax idZ35)
       (quote-syntax show-grid)
       '#f
       '#f
       (quote-syntax idX33)
       (quote-syntax idB36)))
     (#%provide show-grid)
     (define-values (generated-contract24) any/c/proc)
     (define-values
      (idZ39)
      (let-values (((up)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract24)))
        up))
     (define-syntaxes
      (up)
      (#%app
       make-provide/contract-transformer
       (quote-syntax up)
       (quote-syntax idZ39)
       (quote-syntax up)
       '#f
       '#f
       (quote-syntax idX37)
       (quote-syntax idB40)))
     (#%provide up)
     (define-values
      (idX1 idB4)
      (#%app
       do-partial-app
       idZ3
       array-set!
       'array-set!
       blame13
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/grid.rkt>
        '12
        '2
        '121
        '10)
       '#f))
     (define-values
      (idX5 idB8)
      (#%app
       do-partial-app
       idZ7
       build-array
       'build-array
       blame13
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/grid.rkt>
        '13
        '2
        '134
        '11)
       '#f))
     (define-values
      (idX9 idB12)
      (#%app
       do-partial-app
       idZ11
       down
       'down
       blame13
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/grid.rkt>
        '7
        '2
        '64
        '4)
       '#f))
     (define-values
      (idX13 idB16)
      (#%app
       do-partial-app
       idZ15
       grid-height
       'grid-height
       blame13
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/grid.rkt>
        '9
        '2
        '82
        '11)
       '#f))
     (define-values
      (idX17 idB20)
      (#%app
       do-partial-app
       idZ19
       grid-ref
       'grid-ref
       blame13
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/grid.rkt>
        '8
        '2
        '71
        '8)
       '#f))
     (define-values
      (idX21 idB24)
      (#%app
       do-partial-app
       idZ23
       grid-width
       'grid-width
       blame13
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/grid.rkt>
        '10
        '2
        '96
        '10)
       '#f))
     (define-values
      (idX25 idB28)
      (#%app
       do-partial-app
       idZ27
       left
       'left
       blame13
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/grid.rkt>
        '4
        '2
        '44
        '4)
       '#f))
     (define-values
      (idX29 idB32)
      (#%app
       do-partial-app
       idZ31
       right
       'right
       blame13
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/grid.rkt>
        '5
        '2
        '51
        '5)
       '#f))
     (define-values
      (idX33 idB36)
      (#%app
       do-partial-app
       idZ35
       show-grid
       'show-grid
       blame13
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/grid.rkt>
        '11
        '2
        '109
        '9)
       '#f))
     (define-values
      (idX37 idB40)
      (#%app
       do-partial-app
       idZ39
       up
       'up
       blame13
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/grid.rkt>
        '6
        '2
        '59
        '2)
       '#f))))
   (define-values
    (g43)
    (lambda (l)
      (if (#%app vector? l)
        (if (#%app immutable? l) (#%app = '2 (#%app vector-length l)) '#f)
        '#f)))
   (define-values
    (g44)
    (lambda (l)
      (if (#%app vector? l)
        (if (#%app not (#%app immutable? l))
          (#%app = '2 (#%app vector-length l))
          '#f)
        '#f)))
   (define-values (g45) (#%app or/c-name g43 g44))
   (define-values
    (g46)
    (#%app
     flat-recursive-contract10
     '(recursive-contract g50 #:flat)
     (lambda () g50)
     'g46
     'recursive-contract-val->lnp-not-yet-initialized
     '#f
     '#f))
   (define-values
    (g47)
    (#%app
     flat-recursive-contract10
     '(recursive-contract g50 #:flat)
     (lambda () g50)
     'g47
     'recursive-contract-val->lnp-not-yet-initialized
     '#f
     '#f))
   (define-values
    (g48)
    (#%app
     flat-recursive-contract10
     '(recursive-contract g50 #:flat)
     (lambda () g50)
     'g48
     'recursive-contract-val->lnp-not-yet-initialized
     '#f
     '#f))
   (define-values
    (g50)
    (let-values (((check-obj-shape)
                  (#%app
                   contract-first-order
                   (let-values (((just-check-existence106)
                                 just-check-existence)
                                ((just-check-existence105)
                                 just-check-existence)
                                ((just-check-existence107)
                                 just-check-existence)
                                ((just-check-existence108)
                                 just-check-existence)
                                ((just-check-existence109)
                                 just-check-existence)
                                ((just-check-existence110)
                                 just-check-existence))
                     (#%app
                      make-base-object/c
                      (#%app list 'close 'free? 'open 'show)
                      (#%app
                       list
                       just-check-existence107
                       just-check-existence108
                       just-check-existence109
                       just-check-existence110)
                      (#%app list 'items 'occupant)
                      (#%app
                       list
                       just-check-existence106
                       just-check-existence105))))))
      (lambda (this)
        (if (#%app object? this) (#%app check-obj-shape this) '#f))))
   (define-values (g56) (lambda (x) (#%app eq? '#t x)))
   (define-values (g57) (lambda (x) (#%app eq? '#f x)))
   (define-values (g58) (#%app or/c-name g56 g57))
   (define-values
    (g70)
    (lambda (f)
      (if (#%app procedure? f)
        (#%app procedure-arity-includes? f '1 '#f)
        '#f)))
   (#%require "../base/cell-types.rkt")
   (#%require require-typed-check)
   (#%require
    (just-meta 0 (rename "cell.rkt" char->cell% char->cell%))
    (only "cell.rkt"))
   (#%require
    (just-meta 0 (rename "cell.rkt" void-cell% void-cell%))
    (only "cell.rkt"))
   (#%app void char->cell% void-cell%)
   (define-values
    ()
    (begin
      (quote-syntax
       (:-internal array-set! (-> Grid Pos (Instance Cell%) Void))
       #:local)
      (#%plain-app values)))
   (define-values
    (array-set!)
    (lambda (g p v)
      (#%plain-app
       void
       (if (#%plain-app vector? g)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" g '"'g : Grid"))))
       (if (#%plain-app g45 p)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" p '"'p : Pos"))))
       (if (#%plain-app g46 v)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" v '"'v : (Instance Door%)")))))
      (#%app
       vector-set!
       (let-values (((dyn-cod38)
                     (#%app
                      vector-ref
                      g
                      (let-values (((dyn-cod36) (#%app vector-ref p '0)))
                        (if (#%plain-app t:index? dyn-cod36)
                          dyn-cod36
                          (#%plain-app
                           error
                           'transient-assert
                           (#%plain-app
                            format
                            '"got ~s in ~a"
                            dyn-cod36
                            '"'(#%app vector-re... : (Index)")))))))
         (if (#%plain-app vector? dyn-cod38)
           dyn-cod38
           (#%plain-app
            error
            'transient-assert
            (#%plain-app
             format
             '"got ~s in ~a"
             dyn-cod38
             '"'(#%app vector-re... : ((Vectorof (Instance Door%)))"))))
       (let-values (((dyn-cod40) (#%app vector-ref p '1)))
         (if (#%plain-app t:index? dyn-cod40)
           dyn-cod40
           (#%plain-app
            error
            'transient-assert
            (#%plain-app
             format
             '"got ~s in ~a"
             dyn-cod40
             '"'(#%app vector-re... : (Index)"))))
       v)))
   (define-values
    ()
    (begin
      (quote-syntax
       (:-internal build-array (-> Pos (-> Pos (Instance Cell%)) Grid))
       #:local)
      (#%plain-app values)))
   (define-values
    (build-array)
    (lambda (p f)
      (#%plain-app
       void
       (if (#%plain-app g45 p)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" p '"'p : Pos"))))
       (if (#%plain-app g70 f)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app
             format
             '"got ~s in ~a"
             f
             '"'f : (-> Pos (Instance Door%))")))))
      (let-values ()
        (let-values (((n) '0))
          (letrec-values ((()
                           (begin
                             (quote-syntax (:-internal vs Grid) #:local)
                             (#%plain-app values)))
                          ((vs) (#%app vector))
                          ((i) '0))
            (begin
              (let-values (((start) '0)
                           ((end)
                            (let-values (((dyn-cod52) (#%app vector-ref p '0)))
                              (if (#%plain-app t:index? dyn-cod52)
                                dyn-cod52
                                (#%plain-app
                                 error
                                 'transient-assert
                                 (#%plain-app
                                  format
                                  '"got ~s in ~a"
                                  dyn-cod52
                                  '"'(#%app vector-re... : (Index)")))))
                           ((inc) '1))
                (if (#%app
                     variable-reference-from-unsafe?
                     (#%variable-reference))
                  (#%app void)
                  (let-values () (#%app check-range start end inc)))
                (#%plain-app
                 (letrec-values (((for-loop)
                                  (lambda (pos)
                                    (if (#%app < pos end)
                                      (let-values (((x) pos))
                                        (if '#t
                                          (let-values ((()
                                                        (let-values ()
                                                          (let-values ((()
                                                                        (let-values ()
                                                                          (let-values ()
                                                                            (letrec-values (((v)
                                                                                             (let-values ()
                                                                                               (let-values ()
                                                                                                 (let-values (((n)
                                                                                                               '0))
                                                                                                   (letrec-values ((()
                                                                                                                    (begin
                                                                                                                      (quote-syntax
                                                                                                                       (:-internal
                                                                                                                        vs
                                                                                                                        (Vectorof
                                                                                                                         (Instance
                                                                                                                          Cell%)))
                                                                                                                       #:local)
                                                                                                                      (#%plain-app
                                                                                                                       values)))
                                                                                                                   ((vs)
                                                                                                                    (#%app
                                                                                                                     vector))
                                                                                                                   ((i)
                                                                                                                    '0))
                                                                                                     (begin
                                                                                                       (let-values (((start)
                                                                                                                     '0)
                                                                                                                    ((end)
                                                                                                                     (let-values (((dyn-cod54)
                                                                                                                                   (#%app
                                                                                                                                    vector-ref
                                                                                                                                    p
                                                                                                                                    '1)))
                                                                                                                       (if (#%plain-app
                                                                                                                            t:index?
                                                                                                                            dyn-cod54)
                                                                                                                         dyn-cod54
                                                                                                                         (#%plain-app
                                                                                                                          error
                                                                                                                          'transient-assert
                                                                                                                          (#%plain-app
                                                                                                                           format
                                                                                                                           '"got ~s in ~a"
                                                                                                                           dyn-cod54
                                                                                                                           '"'(#%app vector-re... : (Index)")))))
                                                                                                                    ((inc)
                                                                                                                     '1))
                                                                                                         (if (#%app
                                                                                                              variable-reference-from-unsafe?
                                                                                                              (#%variable-reference))
                                                                                                           (#%app
                                                                                                            void)
                                                                                                           (let-values ()
                                                                                                             (#%app
                                                                                                              check-range
                                                                                                              start
                                                                                                              end
                                                                                                              inc)))
                                                                                                         (#%plain-app
                                                                                                          (letrec-values (((for-loop)
                                                                                                                           (lambda (pos)
                                                                                                                             (if (#%app
                                                                                                                                  <
                                                                                                                                  pos
                                                                                                                                  end)
                                                                                                                               (let-values (((y)
                                                                                                                                             pos))
                                                                                                                                 (if '#t
                                                                                                                                   (let-values ((()
                                                                                                                                                 (let-values ()
                                                                                                                                                   (let-values ((()
                                                                                                                                                                 (let-values ()
                                                                                                                                                                   (let-values ()
                                                                                                                                                                     (let-values (((v)
                                                                                                                                                                                   (let-values ()
                                                                                                                                                                                     (let-values (((dyn-cod63)
                                                                                                                                                                                                   (#%app
                                                                                                                                                                                                    f
                                                                                                                                                                                                    (#%app
                                                                                                                                                                                                     vector
                                                                                                                                                                                                     (let-values (((val)
                                                                                                                                                                                                                   x)
                                                                                                                                                                                                                  ((pred)
                                                                                                                                                                                                                   index?))
                                                                                                                                                                                                       (if (let-values (((dyn-cod59)
                                                                                                                                                                                                                         (#%app
                                                                                                                                                                                                                          pred
                                                                                                                                                                                                                          val)))
                                                                                                                                                                                                             (if (#%plain-app
                                                                                                                                                                                                                  g58
                                                                                                                                                                                                                  dyn-cod59)
                                                                                                                                                                                                               dyn-cod59
                                                                                                                                                                                                               (#%plain-app
                                                                                                                                                                                                                error
                                                                                                                                                                                                                'transient-assert
                                                                                                                                                                                                                (#%plain-app
                                                                                                                                                                                                                 format
                                                                                                                                                                                                                 '"got ~s in ~a"
                                                                                                                                                                                                                 dyn-cod59
                                                                                                                                                                                                                 '"'(#%app pred val)... : (Boolean)"))))
                                                                                                                                                                                                         val
                                                                                                                                                                                                         (#%app
                                                                                                                                                                                                          error
                                                                                                                                                                                                          (#%app
                                                                                                                                                                                                           format
                                                                                                                                                                                                           '"Assertion ~a failed on ~v"
                                                                                                                                                                                                           pred
                                                                                                                                                                                                           val))))
                                                                                                                                                                                                     (let-values (((val)
                                                                                                                                                                                                                   y)
                                                                                                                                                                                                                  ((pred)
                                                                                                                                                                                                                   index?))
                                                                                                                                                                                                       (if (let-values (((dyn-cod61)
                                                                                                                                                                                                                         (#%app
                                                                                                                                                                                                                          pred
                                                                                                                                                                                                                          val)))
                                                                                                                                                                                                             (if (#%plain-app
                                                                                                                                                                                                                  g58
                                                                                                                                                                                                                  dyn-cod61)
                                                                                                                                                                                                               dyn-cod61
                                                                                                                                                                                                               (#%plain-app
                                                                                                                                                                                                                error
                                                                                                                                                                                                                'transient-assert
                                                                                                                                                                                                                (#%plain-app
                                                                                                                                                                                                                 format
                                                                                                                                                                                                                 '"got ~s in ~a"
                                                                                                                                                                                                                 dyn-cod61
                                                                                                                                                                                                                 '"'(#%app pred val)... : (Boolean)"))))
                                                                                                                                                                                                         val
                                                                                                                                                                                                         (#%app
                                                                                                                                                                                                          error
                                                                                                                                                                                                          (#%app
                                                                                                                                                                                                           format
                                                                                                                                                                                                           '"Assertion ~a failed on ~v"
                                                                                                                                                                                                           pred
                                                                                                                                                                                                           val))))))))
                                                                                                                                                                                       (if (#%plain-app
                                                                                                                                                                                            g46
                                                                                                                                                                                            dyn-cod63)
                                                                                                                                                                                         dyn-cod63
                                                                                                                                                                                         (#%plain-app
                                                                                                                                                                                          error
                                                                                                                                                                                          'transient-assert
                                                                                                                                                                                          (#%plain-app
                                                                                                                                                                                           format
                                                                                                                                                                                           '"got ~s in ~a"
                                                                                                                                                                                           dyn-cod63
                                                                                                                                                                                           '"'(#%app f (#%app ... : ((Instance Door%))")))))))
                                                                                                                                                                       (if (#%app
                                                                                                                                                                            unsafe-fx=
                                                                                                                                                                            i
                                                                                                                                                                            n)
                                                                                                                                                                         (let-values ()
                                                                                                                                                                           (let-values (((new-n)
                                                                                                                                                                                         (#%app
                                                                                                                                                                                          max
                                                                                                                                                                                          '4
                                                                                                                                                                                          (#%app
                                                                                                                                                                                           unsafe-fx*
                                                                                                                                                                                           '2
                                                                                                                                                                                           n))))
                                                                                                                                                                             (let-values (((new-vs)
                                                                                                                                                                                           (#%app
                                                                                                                                                                                            make-vector
                                                                                                                                                                                            new-n
                                                                                                                                                                                            v)))
                                                                                                                                                                               (#%app
                                                                                                                                                                                vector-copy!
                                                                                                                                                                                new-vs
                                                                                                                                                                                '0
                                                                                                                                                                                vs)
                                                                                                                                                                               (set! n
                                                                                                                                                                                 new-n)
                                                                                                                                                                               (set! vs
                                                                                                                                                                                 new-vs))))
                                                                                                                                                                         (let-values ()
                                                                                                                                                                           (#%app
                                                                                                                                                                            unsafe-vector-set!
                                                                                                                                                                            vs
                                                                                                                                                                            i
                                                                                                                                                                            v)))
                                                                                                                                                                       (set! i
                                                                                                                                                                         (#%app
                                                                                                                                                                          unsafe-fx+
                                                                                                                                                                          i
                                                                                                                                                                          '1))))
                                                                                                                                                                   (#%app
                                                                                                                                                                    values))))
                                                                                                                                                     (#%app
                                                                                                                                                      values)))))
                                                                                                                                     (if (if '#t
                                                                                                                                           (#%app
                                                                                                                                            not
                                                                                                                                            '#f)
                                                                                                                                           '#f)
                                                                                                                                       (#%app
                                                                                                                                        for-loop
                                                                                                                                        (#%app
                                                                                                                                         +
                                                                                                                                         pos
                                                                                                                                         inc))
                                                                                                                                       (#%app
                                                                                                                                        values)))
                                                                                                                                   (#%app
                                                                                                                                    values)))
                                                                                                                               (#%app
                                                                                                                                values)))))
                                                                                                            for-loop)
                                                                                                          start))
                                                                                                       (#%app
                                                                                                        void))
                                                                                                     (if (#%app
                                                                                                          =
                                                                                                          i
                                                                                                          (#%app
                                                                                                           vector-length
                                                                                                           vs))
                                                                                                       (let-values ()
                                                                                                         vs)
                                                                                                       (let-values ()
                                                                                                         (letrec-values ((()
                                                                                                                          (begin
                                                                                                                            (quote-syntax
                                                                                                                             (:-internal
                                                                                                                              new-vs
                                                                                                                              (Vectorof
                                                                                                                               (Instance
                                                                                                                                Cell%)))
                                                                                                                             #:local)
                                                                                                                            (#%plain-app
                                                                                                                             values)))
                                                                                                                         ((new-vs)
                                                                                                                          (#%app
                                                                                                                           make-vector
                                                                                                                           i
                                                                                                                           (let-values (((dyn-cod65)
                                                                                                                                         (#%app
                                                                                                                                          vector-ref
                                                                                                                                          vs
                                                                                                                                          '0)))
                                                                                                                             (if (#%plain-app
                                                                                                                                  g46
                                                                                                                                  dyn-cod65)
                                                                                                                               dyn-cod65
                                                                                                                               (#%plain-app
                                                                                                                                error
                                                                                                                                'transient-assert
                                                                                                                                (#%plain-app
                                                                                                                                 format
                                                                                                                                 '"got ~s in ~a"
                                                                                                                                 dyn-cod65
                                                                                                                                 '"'(#%app vector-re... : ((Instance Door%))")))))))
                                                                                                           (#%app
                                                                                                            vector-copy!
                                                                                                            new-vs
                                                                                                            '1
                                                                                                            vs
                                                                                                            '1
                                                                                                            i)
                                                                                                           new-vs)))))))))
                                                                              (if (#%app
                                                                                   unsafe-fx=
                                                                                   i
                                                                                   n)
                                                                                (let-values ()
                                                                                  (let-values (((new-n)
                                                                                                (#%app
                                                                                                 max
                                                                                                 '4
                                                                                                 (#%app
                                                                                                  unsafe-fx*
                                                                                                  '2
                                                                                                  n))))
                                                                                    (let-values (((new-vs)
                                                                                                  (#%app
                                                                                                   make-vector
                                                                                                   new-n
                                                                                                   v)))
                                                                                      (#%app
                                                                                       vector-copy!
                                                                                       new-vs
                                                                                       '0
                                                                                       vs)
                                                                                      (set! n
                                                                                        new-n)
                                                                                      (set! vs
                                                                                        new-vs))))
                                                                                (let-values ()
                                                                                  (#%app
                                                                                   unsafe-vector-set!
                                                                                   vs
                                                                                   i
                                                                                   v)))
                                                                              (set! i
                                                                                (#%app
                                                                                 unsafe-fx+
                                                                                 i
                                                                                 '1))))
                                                                          (#%app
                                                                           values))))
                                                            (#%app values)))))
                                            (if (if '#t (#%app not '#f) '#f)
                                              (#%app
                                               for-loop
                                               (#%app + pos inc))
                                              (#%app values)))
                                          (#%app values)))
                                      (#%app values)))))
                   for-loop)
                 start))
              (#%app void))
            (if (#%app = i (#%app vector-length vs))
              (let-values () vs)
              (let-values ()
                (letrec-values ((()
                                 (begin
                                   (quote-syntax
                                    (:-internal new-vs Grid)
                                    #:local)
                                   (#%plain-app values)))
                                ((new-vs)
                                 (#%app
                                  make-vector
                                  i
                                  (let-values (((dyn-cod67)
                                                (#%app vector-ref vs '0)))
                                    (if (#%plain-app vector? dyn-cod67)
                                      dyn-cod67
                                      (#%plain-app
                                       error
                                       'transient-assert
                                       (#%plain-app
                                        format
                                        '"got ~s in ~a"
                                        dyn-cod67
                                        '"'(#%app vector-re... : ((Vectorof (Instance Door%)))")))))))
                  (#%app vector-copy! new-vs '1 vs '1 i)
                  new-vs))))))))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal parse-grid (-> (Listof String) Grid)) #:local)
      (#%plain-app values)))
   (define-values
    (lifted/91)
    (#%app
     module-name-fixup
     (#%app variable-reference->module-source/submod (#%variable-reference))
     (#%app list)))
   (define-values
    (parse-grid)
    (lambda (los)
      (#%plain-app
       void
       (if (#%plain-app list? los)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" los '"'los : Queue")))))
      (let-values ()
        (let-values (((n) '0))
          (letrec-values ((()
                           (begin
                             (quote-syntax (:-internal vs Grid) #:local)
                             (#%plain-app values)))
                          ((vs) (#%app vector))
                          ((i) '0))
            (begin
              (let-values (((lst) los))
                (if (#%app
                     variable-reference-from-unsafe?
                     (#%variable-reference))
                  (#%app void)
                  (let-values () (#%app check-list lst)))
                (#%plain-app
                 (letrec-values (((for-loop)
                                  (lambda (lst)
                                    (if (#%app pair? lst)
                                      (let-values (((s)
                                                    (let-values (((dyn-cod72)
                                                                  (#%app
                                                                   unsafe-car
                                                                   lst)))
                                                      (if (#%plain-app
                                                           string?
                                                           dyn-cod72)
                                                        dyn-cod72
                                                        (#%plain-app
                                                         error
                                                         'transient-assert
                                                         (#%plain-app
                                                          format
                                                          '"got ~s in ~a"
                                                          dyn-cod72
                                                          '"'(#%app unsafe-ca... : (String)")))))
                                                   ((rest)
                                                    (#%app unsafe-cdr lst)))
                                        (if '#t
                                          (let-values ((()
                                                        (let-values ()
                                                          (let-values ((()
                                                                        (let-values ()
                                                                          (let-values ()
                                                                            (letrec-values (((v)
                                                                                             (let-values ()
                                                                                               (let-values ()
                                                                                                 (let-values (((n)
                                                                                                               '0))
                                                                                                   (letrec-values ((()
                                                                                                                    (begin
                                                                                                                      (quote-syntax
                                                                                                                       (:-internal
                                                                                                                        vs
                                                                                                                        (Vectorof
                                                                                                                         (Instance
                                                                                                                          Cell%)))
                                                                                                                       #:local)
                                                                                                                      (#%plain-app
                                                                                                                       values)))
                                                                                                                   ((vs)
                                                                                                                    (#%app
                                                                                                                     vector))
                                                                                                                   ((i)
                                                                                                                    '0))
                                                                                                     (begin
                                                                                                       (let-values (((vec
                                                                                                                      len)
                                                                                                                     (let-values (((vec)
                                                                                                                                   s))
                                                                                                                       (#%app
                                                                                                                        check-string
                                                                                                                        vec)
                                                                                                                       (#%app
                                                                                                                        values
                                                                                                                        vec
                                                                                                                        (#%app
                                                                                                                         unsafe-string-length
                                                                                                                         vec)))))
                                                                                                         '#f
                                                                                                         (#%plain-app
                                                                                                          (letrec-values (((for-loop)
                                                                                                                           (lambda (pos)
                                                                                                                             (if (#%app
                                                                                                                                  unsafe-fx<
                                                                                                                                  pos
                                                                                                                                  len)
                                                                                                                               (let-values (((c)
                                                                                                                                             (#%app
                                                                                                                                              string-ref
                                                                                                                                              vec
                                                                                                                                              pos)))
                                                                                                                                 (if '#t
                                                                                                                                   (let-values ((()
                                                                                                                                                 (let-values ()
                                                                                                                                                   (let-values ((()
                                                                                                                                                                 (let-values ()
                                                                                                                                                                   (let-values ()
                                                                                                                                                                     (let-values (((v)
                                                                                                                                                                                   (let-values ()
                                                                                                                                                                                     (let-values (((dyn-cod74)
                                                                                                                                                                                                   (#%app
                                                                                                                                                                                                    do-make-object
                                                                                                                                                                                                    lifted/91
                                                                                                                                                                                                    (#%app
                                                                                                                                                                                                     char->cell%
                                                                                                                                                                                                     c)
                                                                                                                                                                                                    (#%app
                                                                                                                                                                                                     list)
                                                                                                                                                                                                    (#%app
                                                                                                                                                                                                     list))))
                                                                                                                                                                                       (if (#%plain-app
                                                                                                                                                                                            g50
                                                                                                                                                                                            dyn-cod74)
                                                                                                                                                                                         dyn-cod74
                                                                                                                                                                                         (#%plain-app
                                                                                                                                                                                          error
                                                                                                                                                                                          'transient-assert
                                                                                                                                                                                          (#%plain-app
                                                                                                                                                                                           format
                                                                                                                                                                                           '"got ~s in ~a"
                                                                                                                                                                                           dyn-cod74
                                                                                                                                                                                           '"'(#%app do-make-o... : ((Instance Cell%))")))))))
                                                                                                                                                                       (if (#%app
                                                                                                                                                                            unsafe-fx=
                                                                                                                                                                            i
                                                                                                                                                                            n)
                                                                                                                                                                         (let-values ()
                                                                                                                                                                           (let-values (((new-n)
                                                                                                                                                                                         (#%app
                                                                                                                                                                                          max
                                                                                                                                                                                          '4
                                                                                                                                                                                          (#%app
                                                                                                                                                                                           unsafe-fx*
                                                                                                                                                                                           '2
                                                                                                                                                                                           n))))
                                                                                                                                                                             (let-values (((new-vs)
                                                                                                                                                                                           (#%app
                                                                                                                                                                                            make-vector
                                                                                                                                                                                            new-n
                                                                                                                                                                                            v)))
                                                                                                                                                                               (#%app
                                                                                                                                                                                vector-copy!
                                                                                                                                                                                new-vs
                                                                                                                                                                                '0
                                                                                                                                                                                vs)
                                                                                                                                                                               (set! n
                                                                                                                                                                                 new-n)
                                                                                                                                                                               (set! vs
                                                                                                                                                                                 new-vs))))
                                                                                                                                                                         (let-values ()
                                                                                                                                                                           (#%app
                                                                                                                                                                            unsafe-vector-set!
                                                                                                                                                                            vs
                                                                                                                                                                            i
                                                                                                                                                                            v)))
                                                                                                                                                                       (set! i
                                                                                                                                                                         (#%app
                                                                                                                                                                          unsafe-fx+
                                                                                                                                                                          i
                                                                                                                                                                          '1))))
                                                                                                                                                                   (#%app
                                                                                                                                                                    values))))
                                                                                                                                                     (#%app
                                                                                                                                                      values)))))
                                                                                                                                     (if (if '#t
                                                                                                                                           (#%app
                                                                                                                                            not
                                                                                                                                            '#f)
                                                                                                                                           '#f)
                                                                                                                                       (#%app
                                                                                                                                        for-loop
                                                                                                                                        (#%app
                                                                                                                                         unsafe-fx+
                                                                                                                                         '1
                                                                                                                                         pos))
                                                                                                                                       (#%app
                                                                                                                                        values)))
                                                                                                                                   (#%app
                                                                                                                                    values)))
                                                                                                                               (#%app
                                                                                                                                values)))))
                                                                                                            for-loop)
                                                                                                          '0))
                                                                                                       (#%app
                                                                                                        void))
                                                                                                     (if (#%app
                                                                                                          =
                                                                                                          i
                                                                                                          (#%app
                                                                                                           vector-length
                                                                                                           vs))
                                                                                                       (let-values ()
                                                                                                         vs)
                                                                                                       (let-values ()
                                                                                                         (letrec-values ((()
                                                                                                                          (begin
                                                                                                                            (quote-syntax
                                                                                                                             (:-internal
                                                                                                                              new-vs
                                                                                                                              (Vectorof
                                                                                                                               (Instance
                                                                                                                                Cell%)))
                                                                                                                             #:local)
                                                                                                                            (#%plain-app
                                                                                                                             values)))
                                                                                                                         ((new-vs)
                                                                                                                          (#%app
                                                                                                                           make-vector
                                                                                                                           i
                                                                                                                           (let-values (((dyn-cod76)
                                                                                                                                         (#%app
                                                                                                                                          vector-ref
                                                                                                                                          vs
                                                                                                                                          '0)))
                                                                                                                             (if (#%plain-app
                                                                                                                                  g46
                                                                                                                                  dyn-cod76)
                                                                                                                               dyn-cod76
                                                                                                                               (#%plain-app
                                                                                                                                error
                                                                                                                                'transient-assert
                                                                                                                                (#%plain-app
                                                                                                                                 format
                                                                                                                                 '"got ~s in ~a"
                                                                                                                                 dyn-cod76
                                                                                                                                 '"'(#%app vector-re... : ((Instance Door%))")))))))
                                                                                                           (#%app
                                                                                                            vector-copy!
                                                                                                            new-vs
                                                                                                            '1
                                                                                                            vs
                                                                                                            '1
                                                                                                            i)
                                                                                                           new-vs)))))))))
                                                                              (if (#%app
                                                                                   unsafe-fx=
                                                                                   i
                                                                                   n)
                                                                                (let-values ()
                                                                                  (let-values (((new-n)
                                                                                                (#%app
                                                                                                 max
                                                                                                 '4
                                                                                                 (#%app
                                                                                                  unsafe-fx*
                                                                                                  '2
                                                                                                  n))))
                                                                                    (let-values (((new-vs)
                                                                                                  (#%app
                                                                                                   make-vector
                                                                                                   new-n
                                                                                                   v)))
                                                                                      (#%app
                                                                                       vector-copy!
                                                                                       new-vs
                                                                                       '0
                                                                                       vs)
                                                                                      (set! n
                                                                                        new-n)
                                                                                      (set! vs
                                                                                        new-vs))))
                                                                                (let-values ()
                                                                                  (#%app
                                                                                   unsafe-vector-set!
                                                                                   vs
                                                                                   i
                                                                                   v)))
                                                                              (set! i
                                                                                (#%app
                                                                                 unsafe-fx+
                                                                                 i
                                                                                 '1))))
                                                                          (#%app
                                                                           values))))
                                                            (#%app values)))))
                                            (if (if '#t (#%app not '#f) '#f)
                                              (#%app for-loop rest)
                                              (#%app values)))
                                          (#%app values)))
                                      (#%app values)))))
                   for-loop)
                 lst))
              (#%app void))
            (if (#%app = i (#%app vector-length vs))
              (let-values () vs)
              (let-values ()
                (letrec-values ((()
                                 (begin
                                   (quote-syntax
                                    (:-internal new-vs Grid)
                                    #:local)
                                   (#%plain-app values)))
                                ((new-vs)
                                 (#%app
                                  make-vector
                                  i
                                  (let-values (((dyn-cod78)
                                                (#%app vector-ref vs '0)))
                                    (if (#%plain-app vector? dyn-cod78)
                                      dyn-cod78
                                      (#%plain-app
                                       error
                                       'transient-assert
                                       (#%plain-app
                                        format
                                        '"got ~s in ~a"
                                        dyn-cod78
                                        '"'(#%app vector-re... : ((Vectorof (Instance Door%)))")))))))
                  (#%app vector-copy! new-vs '1 vs '1 i)
                  new-vs))))))))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal show-grid (-> Grid String)) #:local)
      (#%plain-app values)))
   (define-values
    (show-grid)
    (lambda (g)
      (#%plain-app
       void
       (if (#%plain-app vector? g)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" g '"'g : Grid")))))
      (#%app
       with-output-to-string
       (lambda ()
         (begin
           (let-values (((vec len)
                         (let-values (((vec) g))
                           (#%app check-vector vec)
                           (#%app
                            values
                            vec
                            (#%app unsafe-vector-length vec)))))
             '#f
             (#%plain-app
              (letrec-values (((for-loop)
                               (lambda (pos)
                                 (if (#%app unsafe-fx< pos len)
                                   (let-values (((r)
                                                 (let-values (((dyn-cod81)
                                                               (#%app
                                                                unsafe-vector-ref
                                                                vec
                                                                pos)))
                                                   (if (#%plain-app
                                                        vector?
                                                        dyn-cod81)
                                                     dyn-cod81
                                                     (#%plain-app
                                                      error
                                                      'transient-assert
                                                      (#%plain-app
                                                       format
                                                       '"got ~s in ~a"
                                                       dyn-cod81
                                                       '"'(#%app unsafe-ve... : ((Vectorof (Instance Door%)))"))))))
                                     (if '#t
                                       (let-values ((()
                                                     (let-values ()
                                                       (let-values ((()
                                                                     (let-values ()
                                                                       (let-values ()
                                                                         (begin
                                                                           (let-values (((vec
                                                                                          len)
                                                                                         (let-values (((vec)
                                                                                                       r))
                                                                                           (#%app
                                                                                            check-vector
                                                                                            vec)
                                                                                           (#%app
                                                                                            values
                                                                                            vec
                                                                                            (#%app
                                                                                             unsafe-vector-length
                                                                                             vec)))))
                                                                             '#f
                                                                             (#%plain-app
                                                                              (letrec-values (((for-loop)
                                                                                               (lambda (pos)
                                                                                                 (if (#%app
                                                                                                      unsafe-fx<
                                                                                                      pos
                                                                                                      len)
                                                                                                   (let-values (((c)
                                                                                                                 (let-values (((dyn-cod83)
                                                                                                                               (#%app
                                                                                                                                unsafe-vector-ref
                                                                                                                                vec
                                                                                                                                pos)))
                                                                                                                   (if (#%plain-app
                                                                                                                        g46
                                                                                                                        dyn-cod83)
                                                                                                                     dyn-cod83
                                                                                                                     (#%plain-app
                                                                                                                      error
                                                                                                                      'transient-assert
                                                                                                                      (#%plain-app
                                                                                                                       format
                                                                                                                       '"got ~s in ~a"
                                                                                                                       dyn-cod83
                                                                                                                       '"'(#%app unsafe-ve... : ((Instance Door%))"))))))
                                                                                                     (if '#t
                                                                                                       (let-values ((()
                                                                                                                     (let-values ()
                                                                                                                       (let-values ((()
                                                                                                                                     (let-values ()
                                                                                                                                       (let-values ()
                                                                                                                                         (#%app
                                                                                                                                          display
                                                                                                                                          (let-values (((temp1)
                                                                                                                                                        'show))
                                                                                                                                            (let-values (((temp3)
                                                                                                                                                          c))
                                                                                                                                              (let-values (((temp2)
                                                                                                                                                            (#%app
                                                                                                                                                             find-method/who
                                                                                                                                                             'send
                                                                                                                                                             temp3
                                                                                                                                                             temp1)))
                                                                                                                                                (let-values ()
                                                                                                                                                  (if (#%app
                                                                                                                                                       wrapped-object?
                                                                                                                                                       temp3)
                                                                                                                                                    (if temp2
                                                                                                                                                      (#%app
                                                                                                                                                       temp2
                                                                                                                                                       (#%app
                                                                                                                                                        wrapped-object-neg-party
                                                                                                                                                        temp3)
                                                                                                                                                       (#%app
                                                                                                                                                        wrapped-object-object
                                                                                                                                                        temp3))
                                                                                                                                                      (let-values (((temp3)
                                                                                                                                                                    (#%app
                                                                                                                                                                     wrapped-object-object
                                                                                                                                                                     temp3)))
                                                                                                                                                        (#%app
                                                                                                                                                         (#%app
                                                                                                                                                          find-method/who
                                                                                                                                                          'send
                                                                                                                                                          temp3
                                                                                                                                                          temp1)
                                                                                                                                                         temp3)))
                                                                                                                                                    (#%app
                                                                                                                                                     temp2
                                                                                                                                                     temp3))))))))
                                                                                                                                       (#%app
                                                                                                                                        values))))
                                                                                                                         (#%app
                                                                                                                          values)))))
                                                                                                         (if (if '#t
                                                                                                               (#%app
                                                                                                                not
                                                                                                                '#f)
                                                                                                               '#f)
                                                                                                           (#%app
                                                                                                            for-loop
                                                                                                            (#%app
                                                                                                             unsafe-fx+
                                                                                                             '1
                                                                                                             pos))
                                                                                                           (#%app
                                                                                                            values)))
                                                                                                       (#%app
                                                                                                        values)))
                                                                                                   (#%app
                                                                                                    values)))))
                                                                                for-loop)
                                                                              '0))
                                                                           (#%app
                                                                            void))
                                                                         (#%app
                                                                          newline))
                                                                       (#%app
                                                                        values))))
                                                         (#%app values)))))
                                         (if (if '#t (#%app not '#f) '#f)
                                           (#%app
                                            for-loop
                                            (#%app unsafe-fx+ '1 pos))
                                           (#%app values)))
                                       (#%app values)))
                                   (#%app values)))))
                for-loop)
              '0))
           (#%app void))))))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal grid-height (-> Grid Index)) #:local)
      (#%plain-app values)))
   (define-values
    (grid-height)
    (lambda (g)
      (#%plain-app
       void
       (if (#%plain-app vector? g)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" g '"'g : Grid")))))
      (#%app vector-length g)))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal grid-width (-> Grid Index)) #:local)
      (#%plain-app values)))
   (define-values
    (grid-width)
    (lambda (g)
      (#%plain-app
       void
       (if (#%plain-app vector? g)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" g '"'g : Grid")))))
      (#%app
       vector-length
       (let-values (((dyn-cod87) (#%app vector-ref g '0)))
         (if (#%plain-app vector? dyn-cod87)
           dyn-cod87
           (#%plain-app
            error
            'transient-assert
            (#%plain-app
             format
             '"got ~s in ~a"
             dyn-cod87
             '"'(#%app vector-re... : ((Vectorof (Instance Door%)))")))))))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal within-grid? (-> Grid Pos Boolean)) #:local)
      (#%plain-app values)))
   (define-values
    (within-grid?)
    (lambda (g pos)
      (#%plain-app
       void
       (if (#%plain-app vector? g)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" g '"'g : Grid"))))
       (if (#%plain-app g45 pos)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" pos '"'pos : Pos")))))
      (if (#%app
           <=
           '0
           (let-values (((dyn-cod90) (#%app vector-ref pos '0)))
             (if (#%plain-app t:index? dyn-cod90)
               dyn-cod90
               (#%plain-app
                error
                'transient-assert
                (#%plain-app
                 format
                 '"got ~s in ~a"
                 dyn-cod90
                 '"'(#%app vector-re... : (Index)"))))
           (#%app sub1 (#%app grid-height g)))
        (#%app
         <=
         '0
         (let-values (((dyn-cod92) (#%app vector-ref pos '1)))
           (if (#%plain-app t:index? dyn-cod92)
             dyn-cod92
             (#%plain-app
              error
              'transient-assert
              (#%plain-app
               format
               '"got ~s in ~a"
               dyn-cod92
               '"'(#%app vector-re... : (Index)"))))
         (#%app sub1 (#%app grid-width g)))
        '#f)))
   (define-values
    ()
    (begin
      (quote-syntax
       (:-internal grid-ref (-> Grid Pos (U #f (Instance Cell%))))
       #:local)
      (#%plain-app values)))
   (define-values
    (grid-ref)
    (lambda (g pos)
      (#%plain-app
       void
       (if (#%plain-app vector? g)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" g '"'g : Grid"))))
       (if (#%plain-app g45 pos)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" pos '"'pos : Pos")))))
      (if (#%app within-grid? g pos)
        (let-values (((dyn-cod102)
                      (#%app
                       vector-ref
                       (let-values (((dyn-cod98)
                                     (#%app
                                      vector-ref
                                      g
                                      (let-values (((dyn-cod96)
                                                    (#%app vector-ref pos '0)))
                                        (if (#%plain-app t:index? dyn-cod96)
                                          dyn-cod96
                                          (#%plain-app
                                           error
                                           'transient-assert
                                           (#%plain-app
                                            format
                                            '"got ~s in ~a"
                                            dyn-cod96
                                            '"'(#%app vector-re... : (Index)")))))))
                         (if (#%plain-app vector? dyn-cod98)
                           dyn-cod98
                           (#%plain-app
                            error
                            'transient-assert
                            (#%plain-app
                             format
                             '"got ~s in ~a"
                             dyn-cod98
                             '"'(#%app vector-re... : ((Vectorof (Instance Door%)))"))))
                       (let-values (((dyn-cod100) (#%app vector-ref pos '1)))
                         (if (#%plain-app t:index? dyn-cod100)
                           dyn-cod100
                           (#%plain-app
                            error
                            'transient-assert
                            (#%plain-app
                             format
                             '"got ~s in ~a"
                             dyn-cod100
                             '"'(#%app vector-re... : (Index)")))))))
          (if (#%plain-app g46 dyn-cod102)
            dyn-cod102
            (#%plain-app
             error
             'transient-assert
             (#%plain-app
              format
              '"got ~s in ~a"
              dyn-cod102
              '"'(#%app vector-re... : ((Instance Door%))"))))
        '#f)))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal left (->* (Pos) (Index) Pos)) #:local)
      (#%plain-app values)))
   (define-values
    (left)
    (let-values (((left)
                  (lambda (pos6 n5)
                    (let-values (((pos) pos6))
                      (let-values (((n) (if '#f '1 n5)))
                        (let-values ()
                          (#%app
                           vector
                           (#%app vector-ref pos '0)
                           (let-values (((val)
                                         (#%app - (#%app vector-ref pos '1) n))
                                        ((pred) index?))
                             (if (#%app pred val)
                               val
                               (#%app
                                error
                                (#%app
                                 format
                                 '"Assertion ~a failed on ~v"
                                 pred
                                 val)))))))))))
      (case-lambda
       ((pos) (#%app left pos '1))
       ((pos n5) (#%app left pos n5)))))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal right (->* (Pos) (Index) Pos)) #:local)
      (#%plain-app values)))
   (define-values
    (right)
    (let-values (((right)
                  (lambda (pos8 n7)
                    (let-values (((pos) pos8))
                      (let-values (((n) (if '#f '1 n7)))
                        (let-values ()
                          (#%app
                           vector
                           (#%app vector-ref pos '0)
                           (let-values (((val)
                                         (#%app + (#%app vector-ref pos '1) n))
                                        ((pred) index?))
                             (if (#%app pred val)
                               val
                               (#%app
                                error
                                (#%app
                                 format
                                 '"Assertion ~a failed on ~v"
                                 pred
                                 val)))))))))))
      (case-lambda
       ((pos) (#%app right pos '1))
       ((pos n7) (#%app right pos n7)))))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal up (->* (Pos) (Index) Pos)) #:local)
      (#%plain-app values)))
   (define-values
    (up)
    (let-values (((up)
                  (lambda (pos10 n9)
                    (let-values (((pos) pos10))
                      (let-values (((n) (if '#f '1 n9)))
                        (let-values ()
                          (#%app
                           vector
                           (let-values (((val)
                                         (#%app - (#%app vector-ref pos '0) n))
                                        ((pred) index?))
                             (if (#%app pred val)
                               val
                               (#%app
                                error
                                (#%app
                                 format
                                 '"Assertion ~a failed on ~v"
                                 pred
                                 val))))
                           (#%app vector-ref pos '1))))))))
      (case-lambda ((pos) (#%app up pos '1)) ((pos n9) (#%app up pos n9)))))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal down (->* (Pos) (Index) Pos)) #:local)
      (#%plain-app values)))
   (define-values
    (down)
    (let-values (((down)
                  (lambda (pos12 n11)
                    (let-values (((pos) pos12))
                      (let-values (((n) (if '#f '1 n11)))
                        (let-values ()
                          (#%app
                           vector
                           (let-values (((val)
                                         (#%app + (#%app vector-ref pos '0) n))
                                        ((pred) index?))
                             (if (#%app pred val)
                               val
                               (#%app
                                error
                                (#%app
                                 format
                                 '"Assertion ~a failed on ~v"
                                 pred
                                 val))))
                           (#%app vector-ref pos '1))))))))
      (case-lambda
       ((pos) (#%app down pos '1))
       ((pos n11) (#%app down pos n11)))))
   (define-syntaxes
    (array-set!)
    (#%app make-redirect14 (quote-syntax array-set!)))
   (define-syntaxes
    (array-set!)
    (#%app
     make-typed-renaming
     (t-quote-syntax array-set!)
     (t-quote-syntax array-set!)
     'transient))
   (define-syntaxes
    (build-array)
    (#%app make-redirect14 (quote-syntax build-array)))
   (define-syntaxes
    (build-array)
    (#%app
     make-typed-renaming
     (t-quote-syntax build-array)
     (t-quote-syntax build-array)
     'transient))
   (define-syntaxes (down) (#%app make-redirect14 (quote-syntax down)))
   (define-syntaxes
    (down)
    (#%app
     make-typed-renaming
     (t-quote-syntax down)
     (t-quote-syntax down)
     'transient))
   (define-syntaxes
    (grid-height)
    (#%app make-redirect14 (quote-syntax grid-height)))
   (define-syntaxes
    (grid-height)
    (#%app
     make-typed-renaming
     (t-quote-syntax grid-height)
     (t-quote-syntax grid-height)
     'transient))
   (define-syntaxes (grid-ref) (#%app make-redirect14 (quote-syntax grid-ref)))
   (define-syntaxes
    (grid-ref)
    (#%app
     make-typed-renaming
     (t-quote-syntax grid-ref)
     (t-quote-syntax grid-ref)
     'transient))
   (define-syntaxes
    (grid-width)
    (#%app make-redirect14 (quote-syntax grid-width)))
   (define-syntaxes
    (grid-width)
    (#%app
     make-typed-renaming
     (t-quote-syntax grid-width)
     (t-quote-syntax grid-width)
     'transient))
   (define-syntaxes (left) (#%app make-redirect14 (quote-syntax left)))
   (define-syntaxes
    (left)
    (#%app
     make-typed-renaming
     (t-quote-syntax left)
     (t-quote-syntax left)
     'transient))
   (define-syntaxes (right) (#%app make-redirect14 (quote-syntax right)))
   (define-syntaxes
    (right)
    (#%app
     make-typed-renaming
     (t-quote-syntax right)
     (t-quote-syntax right)
     'transient))
   (define-syntaxes
    (show-grid)
    (#%app make-redirect14 (quote-syntax show-grid)))
   (define-syntaxes
    (show-grid)
    (#%app
     make-typed-renaming
     (t-quote-syntax show-grid)
     (t-quote-syntax show-grid)
     'transient))
   (define-syntaxes (up) (#%app make-redirect14 (quote-syntax up)))
   (define-syntaxes
    (up)
    (#%app
     make-typed-renaming
     (t-quote-syntax up)
     (t-quote-syntax up)
     'transient))
   (#%provide array-set!)
   (#%provide build-array)
   (#%provide down)
   (#%provide grid-height)
   (#%provide grid-ref)
   (#%provide grid-width)
   (#%provide left)
   (#%provide right)
   (#%provide show-grid)
   (#%provide up)
   (#%provide)
   (#%app void)))
