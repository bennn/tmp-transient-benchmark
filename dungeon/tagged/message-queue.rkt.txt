(module message-queue typed/racket/base
  (#%module-begin
   (module configure-runtime '#%kernel
     (#%module-begin (#%require racket/runtime-config) (#%app configure '#f)))
   (#%require (submod typed-racket/private/type-contract predicates))
   (#%require typed-racket/utils/utils)
   (#%require (for-meta 1 typed-racket/utils/utils))
   (#%require typed-racket/utils/any-wrap)
   (#%require typed-racket/utils/struct-type-c)
   (#%require typed-racket/utils/prefab-c)
   (#%require typed-racket/utils/opaque-object)
   (#%require typed-racket/utils/evt-contract)
   (#%require typed-racket/utils/hash-contract)
   (#%require typed-racket/utils/vector-contract)
   (#%require typed-racket/utils/sealing-contract)
   (#%require typed-racket/utils/promise-not-name-contract)
   (#%require typed-racket/utils/simple-result-arrow)
   (#%require racket/sequence)
   (#%require racket/contract/parametric)
   (begin-for-syntax
    (module*
     #%type-decl
     #f
     (#%plain-module-begin
      (#%declare #:empty-namespace)
      (#%require typed-racket/types/numeric-tower)
      (#%require typed-racket/env/type-name-env)
      (#%require typed-racket/env/global-env)
      (#%require typed-racket/env/type-alias-env)
      (#%require typed-racket/types/struct-table)
      (#%require typed-racket/types/abbrev)
      (#%require
       (just-meta 0 (rename racket/private/sort raw-sort sort))
       (just-meta 0 (rename racket/private/sort vector-sort! vector-sort!))
       (just-meta 0 (rename racket/private/sort vector-sort vector-sort))
       (only racket/private/sort))
      (#%app
       register-type
       (t-quote-syntax enqueue-message!)
       (#%app simple-> (#%app list -String) -Void))
      (#%app register-type (t-quote-syntax message-queue) (#%app -lst -String))
      (#%app
       register-type
       (t-quote-syntax reset-message-queue!)
       (#%app simple-> (#%app list) -Void))
      (#%app
       register-resolved-type-alias
       (t-quote-syntax Queue)
       (#%app -lst -String))
      (#%app register-mutated-var (t-quote-syntax message-queue))
      (#%app
       register-type
       (t-quote-syntax enqueue-message!)
       (#%app simple-> (#%app list -String) -Void))
      (#%app
       register-type
       (t-quote-syntax reset-message-queue!)
       (#%app simple-> (#%app list) -Void)))))
   (begin-for-syntax
    (#%app
     add-mod!
     (#%app variable-reference->module-path-index (#%variable-reference))))
   (define-values
    (blame1)
    (#%app
     module-name-fixup
     (#%app variable-reference->module-source/submod (#%variable-reference))
     (#%app list)))
   (begin-for-syntax
    (#%require typed-racket/utils/redirect-contract)
    (module #%contract-defs-reference racket/base
      (#%module-begin
       (module configure-runtime '#%kernel
         (#%module-begin
          (#%require racket/runtime-config)
          (#%app configure '#f)))
       (#%require racket/runtime-path)
       (#%require (for-meta 1 racket/base))
       (define-values
        (contract-defs-submod)
        (let-values (((contract-defs-submod)
                      (let-values (((runtime?) '#t))
                        (#%app
                         list
                         'module
                         '(submod ".." #%contract-defs)
                         (#%variable-reference)))))
          (let-values (((get-dir) void))
            (#%app
             apply
             values
             (#%app
              resolve-paths
              (#%variable-reference)
              get-dir
              (#%app list contract-defs-submod))))))
       (begin-for-syntax
        (#%app
         register-ext-files
         (#%variable-reference)
         (let-values (((contract-defs-submod)
                       (let-values (((runtime?) '#f))
                         (#%app
                          list
                          'module
                          '(submod ".." #%contract-defs)
                          (#%variable-reference)))))
           (#%app list contract-defs-submod))))
       (#%provide contract-defs-submod)))
    (#%require (submod "." #%contract-defs-reference))
    (define-values
     (make-redirect2)
     (#%app make-make-redirect-to-contract contract-defs-submod)))
   (module*
    #%contract-defs
    #f
    (#%plain-module-begin
     (#%declare #:empty-namespace)
     (#%require (submod typed-racket/private/type-contract predicates))
     (#%require typed-racket/utils/utils)
     (#%require (for-meta 1 typed-racket/utils/utils))
     (#%require typed-racket/utils/any-wrap)
     (#%require typed-racket/utils/struct-type-c)
     (#%require typed-racket/utils/prefab-c)
     (#%require typed-racket/utils/opaque-object)
     (#%require typed-racket/utils/evt-contract)
     (#%require typed-racket/utils/hash-contract)
     (#%require typed-racket/utils/vector-contract)
     (#%require typed-racket/utils/sealing-contract)
     (#%require typed-racket/utils/promise-not-name-contract)
     (#%require typed-racket/utils/simple-result-arrow)
     (#%require racket/sequence)
     (#%require racket/contract/parametric)
     (define-values (generated-contract3) any/c/proc)
     (define-values
      (idZ3)
      (let-values (((enqueue-message!)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract3)))
        enqueue-message!))
     (define-syntaxes
      (enqueue-message!)
      (#%app
       make-provide/contract-transformer
       (quote-syntax enqueue-message!)
       (quote-syntax idZ3)
       (quote-syntax enqueue-message!)
       '#f
       '#f
       (quote-syntax idX1)
       (quote-syntax idB4)))
     (#%provide enqueue-message!)
     (define-values (generated-contract4) any/c/proc)
     (define-values
      (idZ7)
      (let-values (((reset-message-queue!)
                    (#%app
                     coerce-contract
                     'define-module-boundary-contract
                     generated-contract4)))
        reset-message-queue!))
     (define-syntaxes
      (reset-message-queue!)
      (#%app
       make-provide/contract-transformer
       (quote-syntax reset-message-queue!)
       (quote-syntax idZ7)
       (quote-syntax reset-message-queue!)
       '#f
       '#f
       (quote-syntax idX5)
       (quote-syntax idB8)))
     (#%provide reset-message-queue!)
     (define-values
      (idX1 idB4)
      (#%app
       do-partial-app
       idZ3
       enqueue-message!
       'enqueue-message!
       blame1
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/message-queue.rkt>
        '4
        '2
        '49
        '16)
       '#f))
     (define-values
      (idX5 idB8)
      (#%app
       do-partial-app
       idZ7
       reset-message-queue!
       'reset-message-queue!
       blame1
       (#%app
        vector
        '#<path:/Users/ben/code/racket/gtp/transient-tr-benchmark/dungeon/tagged/message-queue.rkt>
        '5
        '2
        '68
        '20)
       '#f))))
   (define-syntaxes (Queue) type-name-error)
   (define-values
    ()
    (begin
      (quote-syntax
       (define-type-alias-internal Queue (Listof String) ())
       #:local)
      (#%plain-app values)))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal message-queue Queue) #:local)
      (#%plain-app values)))
   (define-values (message-queue) '())
   (define-values
    ()
    (begin
      (quote-syntax (:-internal enqueue-message! (-> String Void)) #:local)
      (#%plain-app values)))
   (define-values
    (enqueue-message!)
    (lambda (m)
      (#%plain-app
       void
       (if (#%plain-app string? m)
         (#%app void)
         (let-values ()
           (#%plain-app
            error
            'transient-assert
            (#%plain-app format '"got ~s in ~a" m '"'m : String")))))
      (set! message-queue (#%app cons m message-queue))))
   (define-values
    ()
    (begin
      (quote-syntax (:-internal reset-message-queue! (-> Void)) #:local)
      (#%plain-app values)))
   (define-values (reset-message-queue!) (lambda () (set! message-queue '())))
   (define-syntaxes
    (enqueue-message!)
    (#%app make-redirect2 (quote-syntax enqueue-message!)))
   (define-syntaxes
    (enqueue-message!)
    (#%app
     make-typed-renaming
     (t-quote-syntax enqueue-message!)
     (t-quote-syntax enqueue-message!)
     'transient))
   (define-syntaxes
    (reset-message-queue!)
    (#%app make-redirect2 (quote-syntax reset-message-queue!)))
   (define-syntaxes
    (reset-message-queue!)
    (#%app
     make-typed-renaming
     (t-quote-syntax reset-message-queue!)
     (t-quote-syntax reset-message-queue!)
     'transient))
   (#%provide enqueue-message!)
   (#%provide reset-message-queue!)
   (#%provide)
   (#%app void)))
